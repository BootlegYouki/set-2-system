{"version":3,"file":"_server-CgnM83tM.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/accounts/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { q as query } from \"../../../../chunks/db.js\";\nimport bcrypt from \"bcrypt\";\nimport { g as getUserFromRequest, l as logActivityWithUser } from \"../../../../chunks/auth-helper.js\";\nasync function POST({ request, getClientAddress }) {\n  try {\n    const { accountType, gender, gradeLevel, firstName, lastName, middleInitial, email, birthdate, address, guardian, contactNumber, createdBy } = await request.json();\n    if (!accountType || !gender || !firstName || !lastName) {\n      return json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n    if ((accountType === \"student\" || accountType === \"teacher\") && !email) {\n      return json({ error: \"Email is required for students and teachers\" }, { status: 400 });\n    }\n    if (accountType === \"student\" && !gradeLevel) {\n      return json({ error: \"Grade level is required for students\" }, { status: 400 });\n    }\n    if (accountType === \"student\") {\n      if (!birthdate || !address || !guardian || !contactNumber) {\n        return json({ error: \"Birthdate, address, guardian, and contact number are required for students\" }, { status: 400 });\n      }\n    }\n    let age = null;\n    if (accountType === \"student\" && birthdate) {\n      const birthDate = new Date(birthdate);\n      const today = /* @__PURE__ */ new Date();\n      age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n        age--;\n      }\n    }\n    const accountNumber = await generateAccountNumber(accountType);\n    const hashedPassword = await bcrypt.hash(accountNumber, 10);\n    const fullName = `${lastName}, ${firstName}${middleInitial ? \" \" + middleInitial + \".\" : \"\"}`;\n    const insertQuery = `\n      INSERT INTO users (\n        account_number, \n        account_type, \n        first_name, \n        last_name, \n        middle_initial, \n        full_name,\n        gender, \n        email, \n        grade_level,\n        birthdate,\n        address,\n        age,\n        guardian,\n        contact_number,\n        password_hash,\n        created_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, CURRENT_TIMESTAMP)\n      RETURNING id, account_number, full_name, account_type, created_at, updated_at\n    `;\n    const values = [\n      accountNumber,\n      accountType,\n      firstName,\n      lastName,\n      middleInitial || null,\n      fullName,\n      gender,\n      email || null,\n      gradeLevel || null,\n      birthdate || null,\n      address || null,\n      age,\n      guardian || null,\n      contactNumber || null,\n      hashedPassword\n    ];\n    const result = await query(insertQuery, values);\n    const newAccount = result.rows[0];\n    try {\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await query(\n        \"SELECT log_activity($1, $2, $3, $4, $5, $6)\",\n        [\n          \"account_created\",\n          createdBy || null,\n          // Use the ID of the user who created the account\n          newAccount.account_number,\n          JSON.stringify({\n            account_type: accountType,\n            full_name: fullName,\n            grade_level: gradeLevel\n          }),\n          ip_address,\n          // Now capturing actual IP address\n          user_agent\n          // Now capturing actual user agent\n        ]\n      );\n    } catch (logError) {\n      console.error(\"Error logging account creation activity:\", logError);\n    }\n    const response = {\n      id: newAccount.id,\n      name: newAccount.full_name,\n      type: accountType === \"student\" ? \"Student\" : accountType === \"teacher\" ? \"Teacher\" : \"Admin\",\n      number: newAccount.account_number,\n      createdDate: new Date(newAccount.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(newAccount.updated_at).toLocaleDateString(\"en-US\"),\n      status: \"active\"\n    };\n    return json({ success: true, account: response }, { status: 201 });\n  } catch (error) {\n    console.error(\"Error creating account:\", error);\n    if (error.code === \"23505\") {\n      if (error.constraint === \"users_email_key\") {\n        return json({ error: \"An account with this email already exists\" }, { status: 409 });\n      }\n      if (error.constraint === \"users_account_number_key\") {\n        return json({ error: \"Account number already exists\" }, { status: 409 });\n      }\n    }\n    if (error.code === \"23502\") {\n      return json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n    if (error.code === \"23514\") {\n      return json({ error: \"Invalid data provided\" }, { status: 400 });\n    }\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to create account. Please try again.\" }, { status: 500 });\n  }\n}\nasync function GET({ url }) {\n  try {\n    const limit = url.searchParams.get(\"limit\") || \"10\";\n    const type = url.searchParams.get(\"type\");\n    let selectQuery = `\n      SELECT \n        u.id,\n        u.account_number,\n        u.full_name,\n        u.first_name,\n        u.last_name,\n        u.middle_initial,\n        u.email,\n        u.account_type,\n        u.grade_level,\n        u.birthdate,\n        u.address,\n        u.age,\n        u.guardian,\n        u.contact_number,\n        u.created_at,\n        u.updated_at\n      FROM users u\n    `;\n    const queryParams = [parseInt(limit)];\n    if (type) {\n      selectQuery += ` WHERE u.account_type = $2 AND (u.status IS NULL OR u.status = 'active')`;\n      queryParams.push(type);\n    } else {\n      selectQuery += ` WHERE (u.status IS NULL OR u.status = 'active')`;\n    }\n    selectQuery += ` ORDER BY u.created_at DESC LIMIT $1`;\n    const result = await query(selectQuery, queryParams);\n    const accounts = result.rows.map((account) => ({\n      id: account.id,\n      name: account.full_name,\n      firstName: account.first_name,\n      lastName: account.last_name,\n      middleInitial: account.middle_initial,\n      email: account.email,\n      type: account.account_type === \"student\" ? \"Student\" : account.account_type === \"teacher\" ? \"Teacher\" : \"Admin\",\n      number: account.account_number,\n      gradeLevel: account.grade_level,\n      birthdate: account.birthdate,\n      address: account.address,\n      age: account.age,\n      guardian: account.guardian,\n      contactNumber: account.contact_number,\n      createdDate: new Date(account.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(account.updated_at).toLocaleDateString(\"en-US\"),\n      status: \"active\"\n    }));\n    return json({ success: true, accounts });\n  } catch (error) {\n    console.error(\"Error fetching accounts:\", error);\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    if (error.message && error.message.includes(\"invalid input syntax\")) {\n      return json({ error: \"Invalid limit parameter\" }, { status: 400 });\n    }\n    return json({ error: \"Failed to fetch accounts\" }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  try {\n    const { id, firstName, lastName, middleInitial, gradeLevel, birthdate, address, guardian, contactNumber } = await request.json();\n    if (!id || !firstName || !lastName) {\n      return json({ error: \"Account ID, first name, and last name are required\" }, { status: 400 });\n    }\n    const checkQuery = `SELECT id, account_type, full_name FROM users WHERE id = $1`;\n    const checkResult = await query(checkQuery, [id]);\n    if (checkResult.rows.length === 0) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    const accountType = checkResult.rows[0].account_type;\n    const oldFullName = checkResult.rows[0].full_name;\n    if (accountType === \"student\") {\n      if (!birthdate || !address || !guardian || !contactNumber) {\n        return json({ error: \"Birthdate, address, guardian, and contact number are required for students\" }, { status: 400 });\n      }\n    }\n    let age = null;\n    if (accountType === \"student\" && birthdate) {\n      const birthDate = new Date(birthdate);\n      const today = /* @__PURE__ */ new Date();\n      age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n        age--;\n      }\n    }\n    const fullName = `${lastName}, ${firstName}${middleInitial ? \" \" + middleInitial + \".\" : \"\"}`;\n    let updateQuery;\n    let values;\n    if (accountType === \"teacher\") {\n      updateQuery = `\n        UPDATE users \n        SET \n          first_name = $1,\n          last_name = $2,\n          middle_initial = $3,\n          full_name = $4,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE id = $5\n        RETURNING id, account_number, full_name, first_name, last_name, middle_initial, account_type, grade_level, birthdate, address, age, guardian, contact_number, created_at, updated_at\n      `;\n      values = [\n        firstName,\n        lastName,\n        middleInitial || null,\n        fullName,\n        id\n      ];\n    } else if (accountType === \"student\") {\n      updateQuery = `\n        UPDATE users \n        SET \n          first_name = $1,\n          last_name = $2,\n          middle_initial = $3,\n          full_name = $4,\n          grade_level = $5,\n          birthdate = $6,\n          address = $7,\n          age = $8,\n          guardian = $9,\n          contact_number = $10,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE id = $11\n        RETURNING id, account_number, full_name, first_name, last_name, middle_initial, account_type, grade_level, birthdate, address, age, guardian, contact_number, created_at, updated_at\n      `;\n      values = [\n        firstName,\n        lastName,\n        middleInitial || null,\n        fullName,\n        gradeLevel || null,\n        birthdate || null,\n        address || null,\n        age,\n        guardian || null,\n        contactNumber || null,\n        id\n      ];\n    } else {\n      updateQuery = `\n        UPDATE users \n        SET \n          first_name = $1,\n          last_name = $2,\n          middle_initial = $3,\n          full_name = $4,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE id = $5\n        RETURNING id, account_number, full_name, first_name, last_name, middle_initial, account_type, grade_level, birthdate, address, age, guardian, contact_number, created_at, updated_at\n      `;\n      values = [\n        firstName,\n        lastName,\n        middleInitial || null,\n        fullName,\n        id\n      ];\n    }\n    const result = await query(updateQuery, values);\n    const updatedAccount = result.rows[0];\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"account_updated\",\n        user,\n        {\n          account_type: updatedAccount.account_type,\n          old_full_name: oldFullName,\n          new_full_name: updatedAccount.full_name,\n          account_number: updatedAccount.account_number\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging account update activity:\", logError);\n    }\n    const response = {\n      id: updatedAccount.id,\n      name: updatedAccount.full_name,\n      firstName: updatedAccount.first_name,\n      lastName: updatedAccount.last_name,\n      middleInitial: updatedAccount.middle_initial,\n      type: updatedAccount.account_type === \"student\" ? \"Student\" : updatedAccount.account_type === \"teacher\" ? \"Teacher\" : \"Admin\",\n      number: updatedAccount.account_number,\n      gradeLevel: updatedAccount.grade_level,\n      birthdate: updatedAccount.birthdate,\n      address: updatedAccount.address,\n      age: updatedAccount.age,\n      guardian: updatedAccount.guardian,\n      contactNumber: updatedAccount.contact_number,\n      createdDate: new Date(updatedAccount.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(updatedAccount.updated_at).toLocaleDateString(\"en-US\"),\n      status: \"active\"\n    };\n    return json({\n      success: true,\n      message: `Account for \"${updatedAccount.full_name}\" has been updated successfully`,\n      account: response\n    });\n  } catch (error) {\n    console.error(\"Error updating account:\", error);\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    if (error.code === \"23502\") {\n      return json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n    return json({ error: \"Failed to update account. Please try again.\" }, { status: 500 });\n  }\n}\nasync function DELETE({ request, getClientAddress }) {\n  try {\n    const { id } = await request.json();\n    if (!id) {\n      return json({ error: \"Account ID is required\" }, { status: 400 });\n    }\n    const checkQuery = `SELECT id, full_name, account_type FROM users WHERE id = $1`;\n    const checkResult = await query(checkQuery, [id]);\n    if (checkResult.rows.length === 0) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    const account = checkResult.rows[0];\n    const deleteQuery = `DELETE FROM users WHERE id = $1`;\n    await query(deleteQuery, [id]);\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"account_deleted\",\n        user,\n        {\n          account_type: account.account_type,\n          full_name: account.full_name\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging account deletion activity:\", logError);\n    }\n    const accountTypeLabel = account.account_type === \"student\" ? \"Student\" : account.account_type === \"teacher\" ? \"Teacher\" : \"Admin\";\n    return json({\n      success: true,\n      message: `${accountTypeLabel} \"${account.full_name}\" has been deleted successfully`\n    });\n  } catch (error) {\n    console.error(\"Error deleting/archiving account:\", error);\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    if (error.code === \"23503\") {\n      return json({ error: \"Cannot delete account as it is referenced by other records\" }, { status: 409 });\n    }\n    return json({ error: \"Failed to delete account. Please try again.\" }, { status: 500 });\n  }\n}\nasync function generateAccountNumber(accountType) {\n  const prefix = accountType === \"student\" ? \"STU\" : accountType === \"teacher\" ? \"TCH\" : \"ADM\";\n  const year = (/* @__PURE__ */ new Date()).getFullYear();\n  const existingQuery = `\n    SELECT account_number \n    FROM users \n    WHERE account_number LIKE $1 \n    ORDER BY account_number ASC\n  `;\n  const result = await query(existingQuery, [`${prefix}-${year}-%`]);\n  const existingNumbers = result.rows.map((row) => {\n    const match = row.account_number.match(/-(\\d+)$/);\n    return match ? parseInt(match[1]) : 0;\n  }).sort((a, b) => a - b);\n  let nextNumber = 1;\n  for (let i = 0; i < existingNumbers.length; i++) {\n    if (existingNumbers[i] === nextNumber) {\n      nextNumber++;\n    } else if (existingNumbers[i] > nextNumber) {\n      break;\n    }\n  }\n  return `${prefix}-${year}-${nextNumber.toString().padStart(4, \"0\")}`;\n}\nasync function PATCH({ request, getClientAddress }) {\n  try {\n    const { id, action } = await request.json();\n    if (!id) {\n      return json({ error: \"Account ID is required\" }, { status: 400 });\n    }\n    if (action !== \"archive\") {\n      return json({ error: 'Invalid action. Only \"archive\" is supported.' }, { status: 400 });\n    }\n    const checkQuery = `SELECT id, full_name, account_type FROM users WHERE id = $1`;\n    const checkResult = await query(checkQuery, [id]);\n    if (checkResult.rows.length === 0) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    const account = checkResult.rows[0];\n    if (account.account_type !== \"student\") {\n      return json({ error: \"Only student accounts can be archived\" }, { status: 400 });\n    }\n    const archiveQuery = `\n      UPDATE users \n      SET \n        status = 'archived',\n        archived_at = CURRENT_TIMESTAMP,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n    `;\n    await query(archiveQuery, [id]);\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"account_archived\",\n        user,\n        {\n          account_type: account.account_type,\n          full_name: account.full_name\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging account archiving activity:\", logError);\n    }\n    return json({\n      success: true,\n      message: `Student \"${account.full_name}\" has been archived successfully`\n    });\n  } catch (error) {\n    console.error(\"Error archiving account:\", error);\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed. Please try again.\" }, { status: 503 });\n    }\n    if (error.code === \"23503\") {\n      return json({ error: \"Cannot archive account as it is referenced by other records\" }, { status: 409 });\n    }\n    return json({ error: \"Failed to archive account. Please try again.\" }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  PATCH,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}