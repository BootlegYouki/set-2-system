{"version":3,"file":"_server-D3eFTdEq.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/class-students/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { a as connectToDatabase } from \"../../../../chunks/db.js\";\nimport { ObjectId } from \"mongodb\";\nasync function getCurrentSchoolYear(db) {\n  try {\n    const schoolYearSetting = await db.collection(\"admin_settings\").findOne({\n      setting_key: \"current_school_year\"\n    });\n    return schoolYearSetting?.setting_value || \"2025-2026\";\n  } catch (error) {\n    console.error(\"Error fetching current school year:\", error);\n    return \"2025-2026\";\n  }\n}\nasync function GET({ url }) {\n  try {\n    const sectionId = url.searchParams.get(\"sectionId\");\n    const subjectId = url.searchParams.get(\"subjectId\");\n    const teacherId = url.searchParams.get(\"teacherId\");\n    const verificationOnly = url.searchParams.get(\"verificationOnly\") === \"true\";\n    const gradingPeriodId = parseInt(url.searchParams.get(\"gradingPeriodId\")) || 1;\n    if (!sectionId) {\n      return json({\n        success: false,\n        error: \"Section ID is required\"\n      }, { status: 400 });\n    }\n    const db = await connectToDatabase();\n    const section = await db.collection(\"sections\").findOne({\n      _id: new ObjectId(sectionId),\n      status: \"active\"\n    });\n    if (!section) {\n      return json({\n        success: false,\n        error: \"Section not found or inactive\"\n      }, { status: 404 });\n    }\n    const sectionSchoolYear = section.school_year || \"2025-2026\";\n    const currentSchoolYear = await getCurrentSchoolYear(db);\n    let adviserInfo = { first_name: \"\", last_name: \"\" };\n    if (section.adviser_id) {\n      const adviser = await db.collection(\"users\").findOne({\n        _id: new ObjectId(section.adviser_id)\n      });\n      if (adviser) {\n        adviserInfo = {\n          first_name: adviser.first_name,\n          last_name: adviser.last_name\n        };\n      }\n    }\n    const sectionInfo = {\n      id: section._id.toString(),\n      section_name: section.name,\n      grade_level: section.grade_level,\n      school_year: section.school_year,\n      adviser_first_name: adviserInfo.first_name,\n      adviser_last_name: adviserInfo.last_name,\n      room_name: \"Room 101\"\n      // TODO: Add room information when available\n    };\n    const enrollments = await db.collection(\"section_students\").find({\n      section_id: new ObjectId(sectionId),\n      status: \"active\"\n    }).toArray();\n    const studentIds = enrollments.map((enrollment) => enrollment.student_id);\n    const students = await db.collection(\"users\").find({\n      _id: { $in: studentIds },\n      account_type: \"student\",\n      status: \"active\"\n    }).toArray();\n    const actualStudents = students.map((student) => ({\n      id: student._id.toString(),\n      account_number: student.account_number,\n      first_name: student.first_name,\n      last_name: student.last_name,\n      full_name: student.full_name,\n      email: student.email,\n      grade_level: student.grade_level,\n      enrolled_at: student.created_at,\n      enrollment_status: \"active\"\n    }));\n    if (verificationOnly && subjectId) {\n      const studentsWithVerification = [];\n      for (const student of actualStudents) {\n        const gradeRecord = await db.collection(\"grades\").findOne({\n          student_id: student.id,\n          section_id: sectionId,\n          subject_id: subjectId,\n          school_year: currentSchoolYear,\n          // Use current school year for grades\n          quarter: gradingPeriodId\n          // Use dynamic grading period\n        });\n        const isVerified = gradeRecord ? gradeRecord.verified || gradeRecord.verification?.verified : false;\n        studentsWithVerification.push({\n          id: student.account_number || student.id.toString(),\n          name: student.full_name,\n          isVerified\n        });\n      }\n      return json({\n        success: true,\n        data: {\n          students: studentsWithVerification\n        }\n      });\n    }\n    let actualSubjects = [];\n    if (teacherId) {\n      const scheduleQuery = {\n        section_id: new ObjectId(sectionId),\n        schedule_type: \"subject\",\n        school_year: sectionSchoolYear\n        // Use section's school year for schedules\n      };\n      if (teacherId) {\n        scheduleQuery.teacher_id = new ObjectId(teacherId);\n      }\n      const schedules = await db.collection(\"schedules\").find(scheduleQuery).toArray();\n      const subjectIds = [...new Set(schedules.map((s) => s.subject_id))];\n      if (subjectIds.length > 0) {\n        const subjects = await db.collection(\"subjects\").find({\n          _id: { $in: subjectIds }\n        }).toArray();\n        actualSubjects = subjects.map((subject) => ({\n          id: subject._id.toString(),\n          name: subject.name,\n          code: subject.code\n        }));\n      }\n    }\n    let studentsWithGrades = [];\n    if (subjectId) {\n      for (const student of actualStudents) {\n        const gradeRecord = await db.collection(\"grades\").findOne({\n          student_id: new ObjectId(student.id),\n          section_id: new ObjectId(sectionId),\n          subject_id: new ObjectId(subjectId),\n          school_year: currentSchoolYear,\n          // Use current school year for grades\n          quarter: gradingPeriodId\n          // Use dynamic grading period\n        });\n        const studentData = {\n          ...student,\n          grades: gradeRecord ? {\n            written_work: gradeRecord.written_work || [],\n            performance_tasks: gradeRecord.performance_tasks || [],\n            quarterly_assessment: gradeRecord.quarterly_assessment || [],\n            averages: gradeRecord.averages || {\n              written_work: 0,\n              performance_tasks: 0,\n              quarterly_assessment: 0,\n              final_grade: 0\n            },\n            // Include both verification fields to ensure compatibility\n            verified: gradeRecord.verified || false,\n            verification: gradeRecord.verification || {\n              verified: false,\n              verified_by: null,\n              verified_at: null\n            }\n          } : {\n            written_work: [],\n            performance_tasks: [],\n            quarterly_assessment: [],\n            averages: {\n              written_work: 0,\n              performance_tasks: 0,\n              quarterly_assessment: 0,\n              final_grade: 0\n            },\n            verified: false,\n            verification: {\n              verified: false,\n              verified_by: null,\n              verified_at: null\n            }\n          }\n        };\n        studentsWithGrades.push(studentData);\n      }\n    }\n    return json({\n      success: true,\n      data: {\n        section: sectionInfo,\n        students: subjectId ? studentsWithGrades : actualStudents,\n        subjects: actualSubjects\n      }\n    });\n  } catch (error) {\n    console.error(\"Error in class-students API:\", error);\n    return json({\n      success: false,\n      error: \"Internal server error\"\n    }, { status: 500 });\n  }\n}\nasync function POST({ request }) {\n  try {\n    const { action, ...data } = await request.json();\n    const db = await connectToDatabase();\n    switch (action) {\n      case \"update_grade\":\n        const { student_id, section_id, subject_id, school_year, quarter, category, index, score } = data;\n        const filter = {\n          student_id,\n          section_id,\n          subject_id,\n          school_year,\n          quarter\n        };\n        const existingGrade = await db.collection(\"grades\").findOne(filter);\n        if (existingGrade && existingGrade.verification && existingGrade.verification.verified) {\n          return json({\n            success: false,\n            error: \"Cannot update grades that have been verified by the adviser\"\n          }, { status: 403 });\n        }\n        const updateResult = await db.collection(\"grades\").updateOne(\n          filter,\n          {\n            $set: {\n              [`${category}.${index}.score`]: score,\n              updated_at: /* @__PURE__ */ new Date()\n            }\n          },\n          { upsert: true }\n        );\n        const gradeRecord = await db.collection(\"grades\").findOne({\n          student_id,\n          section_id,\n          subject_id,\n          school_year,\n          quarter\n        });\n        if (gradeRecord) {\n          const weights = { written_work: 0.3, performance_tasks: 0.5, quarterly_assessment: 0.2 };\n          const calculateAverage = (items) => {\n            if (!items || items.length === 0) return 0;\n            const validScores = items.filter((item) => item.score !== null && item.score !== void 0);\n            if (validScores.length === 0) return 0;\n            return validScores.reduce((sum, item) => sum + item.score, 0) / validScores.length;\n          };\n          const averages = {\n            written_work: calculateAverage(gradeRecord.written_work),\n            performance_tasks: calculateAverage(gradeRecord.performance_tasks),\n            quarterly_assessment: calculateAverage(gradeRecord.quarterly_assessment)\n          };\n          averages.final_grade = averages.written_work * weights.written_work + averages.performance_tasks * weights.performance_tasks + averages.quarterly_assessment * weights.quarterly_assessment;\n          await db.collection(\"grades\").updateOne(\n            { _id: gradeRecord._id },\n            { $set: { averages, updated_at: /* @__PURE__ */ new Date() } }\n          );\n        }\n        return json({ success: true });\n      default:\n        return json({\n          success: false,\n          error: \"Invalid action\"\n        }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Error in class-students POST:\", error);\n    return json({\n      success: false,\n      error: \"Internal server error\"\n    }, { status: 500 });\n  }\n}\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}