{"version":3,"file":"_server-OHXGK05B.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/sections/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { a as connectToDatabase } from \"../../../../chunks/db.js\";\nimport { g as getUserFromRequest } from \"../../../../chunks/auth-helper.js\";\nimport { ObjectId } from \"mongodb\";\nasync function GET({ url }) {\n  try {\n    const db = await connectToDatabase();\n    const action = url.searchParams.get(\"action\");\n    const gradeLevel = url.searchParams.get(\"gradeLevel\");\n    const schoolYearSetting = await db.collection(\"admin_settings\").findOne({\n      setting_key: \"current_school_year\"\n    });\n    const schoolYear = url.searchParams.get(\"schoolYear\") || schoolYearSetting?.setting_value || \"2025-2026\";\n    const sectionId = url.searchParams.get(\"sectionId\");\n    switch (action) {\n      case \"available-sections\":\n        const sections = await db.collection(\"sections\").find({\n          status: \"active\"\n        }).sort({ grade_level: 1, name: 1 }).toArray();\n        return json({ success: true, data: sections });\n      case \"available-rooms\":\n        const rooms = await db.collection(\"rooms\").aggregate([\n          {\n            $lookup: {\n              from: \"sections\",\n              localField: \"_id\",\n              foreignField: \"room_id\",\n              as: \"assigned_sections\",\n              pipeline: [{ $match: { status: \"active\" } }]\n            }\n          },\n          {\n            $addFields: {\n              available: { $eq: [{ $size: \"$assigned_sections\" }, 0] }\n            }\n          },\n          {\n            $project: {\n              id: \"$_id\",\n              name: 1,\n              building: 1,\n              floor: 1,\n              status: 1,\n              available: 1\n            }\n          },\n          {\n            $sort: { building: 1, floor: 1, name: 1 }\n          }\n        ]).toArray();\n        return json({ success: true, data: rooms });\n      case \"available-teachers\":\n        const teacherGradeLevel = url.searchParams.get(\"teacherGradeLevel\");\n        const availableTeachers = await db.collection(\"users\").aggregate([\n          {\n            $match: {\n              account_type: \"teacher\",\n              status: \"active\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"sections\",\n              localField: \"_id\",\n              foreignField: \"adviser_id\",\n              as: \"advised_sections\",\n              pipeline: [\n                {\n                  $match: {\n                    status: \"active\",\n                    school_year: schoolYear,\n                    ...teacherGradeLevel && { grade_level: parseInt(teacherGradeLevel) }\n                  }\n                }\n              ]\n            }\n          },\n          {\n            $match: {\n              advised_sections: { $size: 0 }\n            }\n          },\n          {\n            $project: {\n              id: \"$_id\",\n              account_number: 1,\n              first_name: 1,\n              last_name: 1,\n              full_name: 1,\n              email: 1\n            }\n          }\n        ]).toArray();\n        return json({ success: true, data: availableTeachers });\n      case \"available-students\":\n        if (!gradeLevel) {\n          return json({ success: false, error: \"Grade level is required\" }, { status: 400 });\n        }\n        const availableStudents = await db.collection(\"users\").aggregate([\n          {\n            $match: {\n              account_type: \"student\",\n              status: \"active\",\n              grade_level: gradeLevel.toString()\n            }\n          },\n          {\n            $lookup: {\n              from: \"section_students\",\n              localField: \"_id\",\n              foreignField: \"student_id\",\n              as: \"enrollments\",\n              pipeline: [\n                {\n                  $lookup: {\n                    from: \"sections\",\n                    localField: \"section_id\",\n                    foreignField: \"_id\",\n                    as: \"section\"\n                  }\n                },\n                {\n                  $match: {\n                    status: \"active\",\n                    \"section.status\": \"active\",\n                    \"section.school_year\": schoolYear\n                  }\n                }\n              ]\n            }\n          },\n          {\n            $match: {\n              enrollments: { $size: 0 }\n            }\n          },\n          {\n            $project: {\n              id: \"$_id\",\n              account_number: 1,\n              first_name: 1,\n              last_name: 1,\n              full_name: 1,\n              email: 1,\n              grade_level: 1,\n              age: 1,\n              guardian: 1\n            }\n          }\n        ]).toArray();\n        return json({ success: true, data: availableStudents });\n      case \"section-details\":\n        if (!sectionId) {\n          return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n        }\n        const sectionDetails = await db.collection(\"sections\").aggregate([\n          {\n            $match: { _id: new ObjectId(sectionId) }\n          },\n          {\n            $lookup: {\n              from: \"users\",\n              localField: \"adviser_id\",\n              foreignField: \"_id\",\n              as: \"adviser\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"rooms\",\n              localField: \"room_id\",\n              foreignField: \"_id\",\n              as: \"room\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"section_students\",\n              localField: \"_id\",\n              foreignField: \"section_id\",\n              as: \"students\",\n              pipeline: [\n                { $match: { status: \"active\" } },\n                {\n                  $lookup: {\n                    from: \"users\",\n                    localField: \"student_id\",\n                    foreignField: \"_id\",\n                    as: \"student_info\"\n                  }\n                },\n                { $unwind: \"$student_info\" }\n              ]\n            }\n          },\n          {\n            $addFields: {\n              id: \"$_id\",\n              adviser_name: { $arrayElemAt: [\"$adviser.full_name\", 0] },\n              room_name: { $arrayElemAt: [\"$room.name\", 0] },\n              student_count: { $size: \"$students\" }\n            }\n          }\n        ]).toArray();\n        return json({ success: true, data: sectionDetails[0] || null });\n      case \"section-students\":\n        if (!sectionId) {\n          return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n        }\n        const sectionStudents = await db.collection(\"section_students\").aggregate([\n          {\n            $match: {\n              section_id: new ObjectId(sectionId),\n              status: \"active\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"users\",\n              localField: \"student_id\",\n              foreignField: \"_id\",\n              as: \"student\"\n            }\n          },\n          {\n            $unwind: \"$student\"\n          },\n          {\n            $project: {\n              id: \"$student._id\",\n              account_number: \"$student.account_number\",\n              first_name: \"$student.first_name\",\n              last_name: \"$student.last_name\",\n              full_name: \"$student.full_name\",\n              email: \"$student.email\",\n              grade_level: \"$student.grade_level\",\n              age: \"$student.age\",\n              guardian: \"$student.guardian\",\n              enrolled_at: \"$enrolled_at\",\n              enrollment_status: \"$status\"\n            }\n          },\n          {\n            $sort: { full_name: 1 }\n          }\n        ]).toArray();\n        return json({ success: true, data: sectionStudents });\n      default:\n        const searchTerm = url.searchParams.get(\"search\");\n        let pipeline = [\n          {\n            $match: {\n              school_year: schoolYear,\n              status: \"active\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"users\",\n              localField: \"adviser_id\",\n              foreignField: \"_id\",\n              as: \"adviser\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"rooms\",\n              localField: \"room_id\",\n              foreignField: \"_id\",\n              as: \"room\"\n            }\n          },\n          {\n            $lookup: {\n              from: \"section_students\",\n              localField: \"_id\",\n              foreignField: \"section_id\",\n              as: \"students\",\n              pipeline: [\n                { $match: { status: \"active\" } },\n                {\n                  $lookup: {\n                    from: \"users\",\n                    localField: \"student_id\",\n                    foreignField: \"_id\",\n                    as: \"student_info\"\n                  }\n                },\n                { $unwind: \"$student_info\" }\n              ]\n            }\n          },\n          {\n            $addFields: {\n              id: \"$_id\",\n              adviser_name: { $arrayElemAt: [\"$adviser.full_name\", 0] },\n              adviser_account_number: { $arrayElemAt: [\"$adviser.account_number\", 0] },\n              room_name: { $arrayElemAt: [\"$room.name\", 0] },\n              room_building: { $arrayElemAt: [\"$room.building\", 0] },\n              room_floor: { $arrayElemAt: [\"$room.floor\", 0] },\n              student_count: { $size: \"$students\" }\n            }\n          }\n        ];\n        if (searchTerm && searchTerm.trim()) {\n          const searchRegex = { $regex: searchTerm.trim(), $options: \"i\" };\n          pipeline.push({\n            $match: {\n              $or: [\n                // Search by section name\n                { name: searchRegex },\n                // Search by grade level (as string)\n                { grade_level: { $regex: searchTerm.trim(), $options: \"i\" } },\n                // Search by adviser name\n                { adviser_name: searchRegex },\n                // Search by student account number or name\n                {\n                  \"students.student_info.account_number\": searchRegex\n                },\n                {\n                  \"students.student_info.full_name\": searchRegex\n                },\n                {\n                  \"students.student_info.first_name\": searchRegex\n                },\n                {\n                  \"students.student_info.last_name\": searchRegex\n                }\n              ]\n            }\n          });\n        }\n        pipeline.push({\n          $sort: { grade_level: 1, name: 1 }\n        });\n        const allSections = await db.collection(\"sections\").aggregate(pipeline).toArray();\n        return json({ success: true, data: allSections });\n    }\n  } catch (error) {\n    console.error(\"Error fetching sections data:\", error);\n    return json({ success: false, error: \"Failed to fetch data\" }, { status: 500 });\n  }\n}\nasync function POST({ request, getClientAddress }) {\n  try {\n    const db = await connectToDatabase();\n    const requestBody = await request.json();\n    const {\n      sectionName,\n      gradeLevel,\n      schoolYear,\n      adviserId: adviserId_raw,\n      studentIds,\n      roomId\n    } = requestBody;\n    const adviserId = adviserId_raw || requestBody.adviser_id;\n    const clientIP = getClientAddress();\n    const userAgent = request.headers.get(\"user-agent\");\n    const user = await getUserFromRequest(request);\n    console.log(\"User authentication result:\", user ? \"SUCCESS\" : \"FAILED\");\n    console.log(\"User details:\", user ? { id: user._id, account_type: user.account_type } : \"No user\");\n    if (!user) {\n      return json({ success: false, error: \"Authentication required\" }, { status: 401 });\n    }\n    if (!sectionName || !gradeLevel || !schoolYear) {\n      return json({ success: false, error: \"Missing required fields\" }, { status: 400 });\n    }\n    const existingSection = await db.collection(\"sections\").findOne({\n      name: sectionName,\n      grade_level: parseInt(gradeLevel),\n      school_year: schoolYear,\n      status: \"active\"\n    });\n    if (existingSection) {\n      return json({\n        success: false,\n        error: \"A section with this name already exists for the specified grade level and school year\"\n      }, { status: 400 });\n    }\n    if (adviserId) {\n      const adviser = await db.collection(\"users\").findOne({\n        _id: new ObjectId(adviserId),\n        account_type: \"teacher\",\n        status: \"active\"\n      });\n      if (!adviser) {\n        return json({\n          success: false,\n          error: \"Invalid adviser selected\"\n        }, { status: 400 });\n      }\n      const existingAdviserSection = await db.collection(\"sections\").findOne({\n        adviser_id: new ObjectId(adviserId),\n        school_year: schoolYear,\n        status: \"active\"\n      });\n      if (existingAdviserSection) {\n        return json({\n          success: false,\n          error: \"This teacher is already assigned as an adviser to another section\"\n        }, { status: 400 });\n      }\n    }\n    if (roomId) {\n      const room = await db.collection(\"rooms\").findOne({\n        _id: new ObjectId(roomId),\n        status: \"active\"\n      });\n      if (!room) {\n        return json({\n          success: false,\n          error: \"Invalid room selected\"\n        }, { status: 400 });\n      }\n      const existingRoomSection = await db.collection(\"sections\").findOne({\n        room_id: new ObjectId(roomId),\n        status: \"active\"\n      });\n      if (existingRoomSection) {\n        return json({\n          success: false,\n          error: \"This room is already assigned to another section\"\n        }, { status: 400 });\n      }\n    }\n    const sectionData = {\n      name: sectionName,\n      grade_level: parseInt(gradeLevel),\n      school_year: schoolYear,\n      status: \"active\",\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    if (adviserId) {\n      sectionData.adviser_id = new ObjectId(adviserId);\n    }\n    if (roomId) {\n      sectionData.room_id = new ObjectId(roomId);\n    }\n    const sectionResult = await db.collection(\"sections\").insertOne(sectionData);\n    const newSectionId = sectionResult.insertedId;\n    if (studentIds && Array.isArray(studentIds) && studentIds.length > 0) {\n      const students = await db.collection(\"users\").find({\n        _id: { $in: studentIds.map((id) => new ObjectId(id)) },\n        account_type: \"student\",\n        status: \"active\",\n        grade_level: gradeLevel.toString()\n      }).toArray();\n      if (students.length !== studentIds.length) {\n        return json({\n          success: false,\n          error: \"Some selected students are invalid or not available\"\n        }, { status: 400 });\n      }\n      const existingEnrollments = await db.collection(\"section_students\").find({\n        student_id: { $in: studentIds.map((id) => new ObjectId(id)) },\n        status: \"active\"\n      }).toArray();\n      if (existingEnrollments.length > 0) {\n        return json({\n          success: false,\n          error: \"Some students are already enrolled in other sections\"\n        }, { status: 400 });\n      }\n      const enrollmentData = studentIds.map((studentId) => ({\n        section_id: newSectionId,\n        student_id: new ObjectId(studentId),\n        enrolled_at: /* @__PURE__ */ new Date(),\n        status: \"active\"\n      }));\n      await db.collection(\"section_students\").insertMany(enrollmentData);\n    }\n    try {\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"section_created\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.account_number || null,\n        activity_data: {\n          section_name: sectionName,\n          grade_level: parseInt(gradeLevel),\n          school_year: schoolYear,\n          student_count: studentIds ? studentIds.length : 0\n        },\n        ip_address: clientIP,\n        user_agent: userAgent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n      if (studentIds && studentIds.length > 0) {\n        for (const studentId of studentIds) {\n          const student = await db.collection(\"users\").findOne({ _id: new ObjectId(studentId) });\n          await activityCollection.insertOne({\n            activity_type: \"student_enrolled_to_section\",\n            user_id: user?.id ? new ObjectId(user.id) : null,\n            user_account_number: user?.account_number || null,\n            activity_data: {\n              section_name: sectionName,\n              student: {\n                name: student?.full_name,\n                account_number: student?.account_number\n              }\n            },\n            ip_address: clientIP,\n            user_agent: userAgent,\n            created_at: /* @__PURE__ */ new Date()\n          });\n        }\n      }\n    } catch (logError) {\n      console.error(\"Error logging section creation activity:\", logError);\n    }\n    const sectionDetails = await db.collection(\"sections\").aggregate([\n      {\n        $match: { _id: newSectionId }\n      },\n      {\n        $lookup: {\n          from: \"users\",\n          localField: \"adviser_id\",\n          foreignField: \"_id\",\n          as: \"adviser\"\n        }\n      },\n      {\n        $lookup: {\n          from: \"rooms\",\n          localField: \"room_id\",\n          foreignField: \"_id\",\n          as: \"room\"\n        }\n      },\n      {\n        $lookup: {\n          from: \"section_students\",\n          localField: \"_id\",\n          foreignField: \"section_id\",\n          as: \"students\",\n          pipeline: [{ $match: { status: \"active\" } }]\n        }\n      },\n      {\n        $addFields: {\n          id: \"$_id\",\n          adviser_name: { $arrayElemAt: [\"$adviser.full_name\", 0] },\n          room_name: { $arrayElemAt: [\"$room.name\", 0] },\n          student_count: { $size: \"$students\" }\n        }\n      }\n    ]).toArray();\n    return json({\n      success: true,\n      data: sectionDetails[0],\n      message: `Section ${sectionName} created successfully with ${studentIds ? studentIds.length : 0} students`\n    });\n  } catch (error) {\n    console.error(\"Error creating section:\", error);\n    return json({ success: false, error: \"Failed to create section\" }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  console.log(\"=== PUT REQUEST STARTED ===\");\n  try {\n    const db = await connectToDatabase();\n    console.log(\"Database connected successfully\");\n    const requestBody = await request.json();\n    console.log(\"Request body:\", JSON.stringify(requestBody, null, 2));\n    const sectionId = requestBody.sectionId || requestBody.section_id;\n    const updates = requestBody.updates || {\n      name: requestBody.sectionName,\n      adviserId: requestBody.adviserId,\n      studentIds: requestBody.studentIds,\n      roomId: requestBody.roomId\n    };\n    console.log(\"Parsed sectionId:\", sectionId);\n    console.log(\"Parsed updates:\", JSON.stringify(updates, null, 2));\n    const clientIP = getClientAddress();\n    const userAgent = request.headers.get(\"user-agent\");\n    const user = await getUserFromRequest(request);\n    if (!user) {\n      console.log(\"Authentication failed - returning 401\");\n      return json({ success: false, error: \"Authentication required\" }, { status: 401 });\n    }\n    if (!sectionId) {\n      console.log(\"Section ID missing - returning 400\");\n      return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n    }\n    console.log(\"Starting database operations...\");\n    const currentSection = await db.collection(\"sections\").findOne({\n      _id: new ObjectId(sectionId),\n      status: \"active\"\n    });\n    console.log(\"Current section found:\", currentSection ? \"YES\" : \"NO\");\n    console.log(\"Current section data:\", currentSection);\n    if (!currentSection) {\n      return json({ success: false, error: \"Section not found\" }, { status: 404 });\n    }\n    const updateData = {\n      $set: { updated_at: /* @__PURE__ */ new Date() }\n    };\n    const changes = [];\n    if (updates.name && updates.name !== currentSection.name) {\n      const existingSection = await db.collection(\"sections\").findOne({\n        name: updates.name,\n        grade_level: currentSection.grade_level,\n        school_year: currentSection.school_year,\n        status: \"active\",\n        _id: { $ne: new ObjectId(sectionId) }\n      });\n      if (existingSection) {\n        return json({\n          success: false,\n          error: \"A section with this name already exists for the same grade level and school year\"\n        }, { status: 400 });\n      }\n      updateData.$set.name = updates.name;\n      changes.push(`Name changed from \"${currentSection.name}\" to \"${updates.name}\"`);\n    }\n    if (updates.adviserId !== void 0) {\n      if (updates.adviserId && updates.adviserId !== currentSection.adviser_id?.toString()) {\n        const adviser = await db.collection(\"users\").findOne({\n          _id: new ObjectId(updates.adviserId),\n          account_type: \"teacher\",\n          status: \"active\"\n        });\n        if (!adviser) {\n          return json({\n            success: false,\n            error: \"Invalid adviser selected\"\n          }, { status: 400 });\n        }\n        const existingAdviserSection = await db.collection(\"sections\").findOne({\n          adviser_id: new ObjectId(updates.adviserId),\n          school_year: currentSection.school_year,\n          status: \"active\",\n          _id: { $ne: new ObjectId(sectionId) }\n        });\n        if (existingAdviserSection) {\n          return json({\n            success: false,\n            error: \"This teacher is already assigned as an adviser to another section\"\n          }, { status: 400 });\n        }\n        updateData.$set.adviser_id = new ObjectId(updates.adviserId);\n        changes.push(`Adviser assigned: ${adviser.full_name}`);\n      } else if (!updates.adviserId && currentSection.adviser_id) {\n        updateData.$unset = { adviser_id: \"\" };\n        changes.push(\"Adviser removed\");\n      }\n    }\n    if (updates.roomId !== void 0) {\n      if (updates.roomId && updates.roomId !== currentSection.room_id?.toString()) {\n        const room = await db.collection(\"rooms\").findOne({\n          _id: new ObjectId(updates.roomId),\n          status: \"active\"\n        });\n        if (!room) {\n          return json({\n            success: false,\n            error: \"Invalid room selected\"\n          }, { status: 400 });\n        }\n        const existingRoomSection = await db.collection(\"sections\").findOne({\n          room_id: new ObjectId(updates.roomId),\n          status: \"active\",\n          _id: { $ne: new ObjectId(sectionId) }\n        });\n        if (existingRoomSection) {\n          return json({\n            success: false,\n            error: \"This room is already assigned to another section\"\n          }, { status: 400 });\n        }\n        updateData.$set.room_id = new ObjectId(updates.roomId);\n        changes.push(`Room assigned: ${room.name}`);\n      } else if (!updates.roomId && currentSection.room_id) {\n        if (!updateData.$unset) updateData.$unset = {};\n        updateData.$unset.room_id = \"\";\n        changes.push(\"Room removed\");\n      }\n    }\n    if (updates.studentIds !== void 0) {\n      const newStudentIds = updates.studentIds || [];\n      const currentStudents = await db.collection(\"section_students\").find({\n        section_id: new ObjectId(sectionId),\n        status: \"active\"\n      }).toArray();\n      const currentStudentIds = currentStudents.map((s) => s.student_id.toString());\n      const newStudentIdStrings = newStudentIds.map((id) => id.toString());\n      const studentsToAdd = newStudentIds.filter((id) => !currentStudentIds.includes(id.toString()));\n      const studentsToRemove = currentStudentIds.filter((id) => !newStudentIdStrings.includes(id));\n      if (studentsToAdd.length > 0) {\n        const validStudentIds = studentsToAdd.filter((id) => {\n          try {\n            return id && ObjectId.isValid(id);\n          } catch (e) {\n            return false;\n          }\n        });\n        if (validStudentIds.length === 0) {\n          return json({\n            success: false,\n            error: \"No valid student IDs provided\"\n          }, { status: 400 });\n        }\n        const students = await db.collection(\"users\").find({\n          _id: { $in: validStudentIds.map((id) => new ObjectId(id)) },\n          account_type: \"student\",\n          status: \"active\",\n          grade_level: currentSection.grade_level.toString()\n        }).toArray();\n        if (students.length !== validStudentIds.length) {\n          return json({\n            success: false,\n            error: \"Some selected students are invalid or not available\"\n          }, { status: 400 });\n        }\n        const existingEnrollments = await db.collection(\"section_students\").find({\n          student_id: { $in: validStudentIds.map((id) => new ObjectId(id)) },\n          status: \"active\"\n        }).toArray();\n        if (existingEnrollments.length > 0) {\n          return json({\n            success: false,\n            error: \"Some students are already enrolled in other sections\"\n          }, { status: 400 });\n        }\n        const enrollmentData = validStudentIds.map((studentId) => ({\n          section_id: new ObjectId(sectionId),\n          student_id: new ObjectId(studentId),\n          enrolled_at: /* @__PURE__ */ new Date(),\n          status: \"active\"\n        }));\n        await db.collection(\"section_students\").insertMany(enrollmentData);\n        changes.push(`Added ${validStudentIds.length} students`);\n        const activityCollection = db.collection(\"activity_logs\");\n        for (const student of students) {\n          await activityCollection.insertOne({\n            activity_type: \"student_added_to_section\",\n            user_id: user?.id ? new ObjectId(user.id) : null,\n            user_account_number: user?.account_number || null,\n            activity_data: {\n              section_name: currentSection.name,\n              student: {\n                name: student.full_name,\n                account_number: student.account_number\n              }\n            },\n            ip_address: clientIP,\n            user_agent: userAgent,\n            created_at: /* @__PURE__ */ new Date()\n          });\n        }\n      }\n      if (studentsToRemove.length > 0) {\n        const validRemoveIds = studentsToRemove.filter((id) => {\n          try {\n            return id && ObjectId.isValid(id);\n          } catch (e) {\n            return false;\n          }\n        });\n        if (validRemoveIds.length > 0) {\n          await db.collection(\"section_students\").updateMany(\n            {\n              section_id: new ObjectId(sectionId),\n              student_id: { $in: validRemoveIds.map((id) => new ObjectId(id)) },\n              status: \"active\"\n            },\n            {\n              $set: {\n                status: \"inactive\",\n                removed_at: /* @__PURE__ */ new Date()\n              }\n            }\n          );\n          changes.push(`Removed ${validRemoveIds.length} students`);\n          const removedStudents = await db.collection(\"users\").find({\n            _id: { $in: validRemoveIds.map((id) => new ObjectId(id)) }\n          }).toArray();\n          const activityCollection = db.collection(\"activity_logs\");\n          for (const student of removedStudents) {\n            await activityCollection.insertOne({\n              activity_type: \"student_removed_from_section\",\n              user_id: user?.id ? new ObjectId(user.id) : null,\n              user_account_number: user?.account_number || null,\n              activity_data: {\n                section_name: currentSection.name,\n                student: {\n                  name: student.full_name,\n                  account_number: student.account_number\n                }\n              },\n              ip_address: clientIP,\n              user_agent: userAgent,\n              created_at: /* @__PURE__ */ new Date()\n            });\n          }\n        }\n      }\n    }\n    if (Object.keys(updateData.$set).length > 1 || updateData.$unset) {\n      console.log(\"Updating section with data:\", JSON.stringify(updateData, null, 2));\n      await db.collection(\"sections\").updateOne(\n        { _id: new ObjectId(sectionId) },\n        updateData\n      );\n    }\n    const nonStudentChanges = changes.filter(\n      (change) => !change.includes(\"Added\") && !change.includes(\"Removed\") && !change.includes(\"students\")\n    );\n    if (nonStudentChanges.length > 0) {\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"section_updated\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.account_number || null,\n        activity_data: {\n          section_name: currentSection.name\n        },\n        ip_address: clientIP,\n        user_agent: userAgent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    }\n    const updatedSection = await db.collection(\"sections\").aggregate([\n      {\n        $match: { _id: new ObjectId(sectionId) }\n      },\n      {\n        $lookup: {\n          from: \"users\",\n          localField: \"adviser_id\",\n          foreignField: \"_id\",\n          as: \"adviser\"\n        }\n      },\n      {\n        $lookup: {\n          from: \"rooms\",\n          localField: \"room_id\",\n          foreignField: \"_id\",\n          as: \"room\"\n        }\n      },\n      {\n        $lookup: {\n          from: \"section_students\",\n          localField: \"_id\",\n          foreignField: \"section_id\",\n          as: \"students\",\n          pipeline: [{ $match: { status: \"active\" } }]\n        }\n      },\n      {\n        $addFields: {\n          id: \"$_id\",\n          adviser_name: { $arrayElemAt: [\"$adviser.full_name\", 0] },\n          room_name: { $arrayElemAt: [\"$room.name\", 0] },\n          student_count: { $size: \"$students\" }\n        }\n      }\n    ]).toArray();\n    return json({\n      success: true,\n      data: updatedSection[0],\n      message: changes.length > 0 ? `Section updated: ${changes.join(\", \")}` : \"No changes made\"\n    });\n  } catch (error) {\n    console.error(\"Error updating section:\", error);\n    console.error(\"Error details:\", error.message);\n    console.error(\"Stack trace:\", error.stack);\n    return json({ success: false, error: \"Failed to update section\" }, { status: 500 });\n  }\n}\nasync function DELETE({ request, getClientAddress, url }) {\n  try {\n    const db = await connectToDatabase();\n    const sectionId = url.searchParams.get(\"sectionId\");\n    const clientIP = getClientAddress();\n    const userAgent = request.headers.get(\"user-agent\");\n    const user = getUserFromRequest(request);\n    if (!user) {\n      return json({ success: false, error: \"Authentication required\" }, { status: 401 });\n    }\n    if (!sectionId) {\n      return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n    }\n    const section = await db.collection(\"sections\").findOne({\n      _id: new ObjectId(sectionId),\n      status: \"active\"\n    });\n    if (!section) {\n      return json({ success: false, error: \"Section not found\" }, { status: 404 });\n    }\n    const studentCount = await db.collection(\"section_students\").countDocuments({\n      section_id: new ObjectId(sectionId),\n      status: \"active\"\n    });\n    if (section.room_id) {\n      await db.collection(\"rooms\").updateOne(\n        { _id: section.room_id },\n        {\n          $set: {\n            status: \"available\",\n            updated_at: /* @__PURE__ */ new Date()\n          },\n          $unset: { assigned_to: \"\" }\n        }\n      );\n    }\n    await db.collection(\"section_students\").updateMany(\n      {\n        section_id: new ObjectId(sectionId),\n        status: \"active\"\n      },\n      {\n        $set: {\n          status: \"inactive\",\n          removed_at: /* @__PURE__ */ new Date()\n        }\n      }\n    );\n    await db.collection(\"sections\").updateOne(\n      { _id: new ObjectId(sectionId) },\n      {\n        $set: {\n          status: \"inactive\",\n          deleted_at: /* @__PURE__ */ new Date()\n        }\n      }\n    );\n    try {\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"section_deleted\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.account_number || null,\n        activity_data: {\n          section_name: section.name,\n          grade_level: section.grade_level,\n          school_year: section.school_year,\n          student_count: studentCount\n        },\n        ip_address: clientIP,\n        user_agent: userAgent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging section deletion activity:\", logError);\n    }\n    return json({\n      success: true,\n      message: `Section ${section.name} has been deleted successfully`\n    });\n  } catch (error) {\n    console.error(\"Error deleting section:\", error);\n    console.error(\"Error details:\", error.message);\n    console.error(\"Stack trace:\", error.stack);\n    return json({ success: false, error: \"Failed to delete section\" }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}