{"version":3,"file":"_server-CydLJnia.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/rooms/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { a as connectToDatabase } from \"../../../../chunks/db.js\";\nimport { g as getUserFromRequest, l as logActivityWithUser } from \"../../../../chunks/auth-helper.js\";\nimport { ObjectId } from \"mongodb\";\nasync function GET({ url }) {\n  try {\n    const searchTerm = url.searchParams.get(\"search\") || \"\";\n    const building = url.searchParams.get(\"building\");\n    const status = url.searchParams.get(\"status\");\n    const db = await connectToDatabase();\n    const roomsCollection = db.collection(\"rooms\");\n    const sectionsCollection = db.collection(\"sections\");\n    let query = {};\n    if (searchTerm) {\n      query.$or = [\n        { name: { $regex: searchTerm, $options: \"i\" } },\n        { building: { $regex: searchTerm, $options: \"i\" } },\n        { floor: { $regex: searchTerm, $options: \"i\" } }\n      ];\n    }\n    if (building && building !== \"\") {\n      query.building = { $regex: `^${building}$`, $options: \"i\" };\n    }\n    if (status && status !== \"\") {\n      query.status = status;\n    }\n    const rooms = await roomsCollection.aggregate([\n      { $match: query },\n      {\n        $lookup: {\n          from: \"sections\",\n          localField: \"_id\",\n          foreignField: \"room_id\",\n          as: \"assignedSections\",\n          pipeline: [\n            { $match: { status: \"active\" } }\n          ]\n        }\n      },\n      { $sort: { created_at: -1 } }\n    ]).toArray();\n    const formattedRooms = rooms.map((room) => ({\n      id: room._id.toString(),\n      name: room.name,\n      building: room.building,\n      floor: room.floor,\n      status: room.status,\n      assignedTo: room.assigned_to,\n      createdDate: new Date(room.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(room.updated_at).toLocaleDateString(\"en-US\"),\n      assignedSections: room.assignedSections.map((section) => ({\n        id: section._id.toString(),\n        name: section.name,\n        gradeLevel: section.grade_level,\n        schoolYear: section.school_year\n      }))\n    }));\n    return json({\n      success: true,\n      data: formattedRooms\n    });\n  } catch (error) {\n    console.error(\"Error fetching rooms:\", error);\n    return json({\n      success: false,\n      message: \"Failed to fetch rooms: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function POST({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { name, building, floor } = data;\n    if (!name || !building || !floor) {\n      return json({\n        success: false,\n        message: \"Name, building, and floor are required\"\n      }, { status: 400 });\n    }\n    const db = await connectToDatabase();\n    const roomsCollection = db.collection(\"rooms\");\n    const existingRoom = await roomsCollection.findOne({\n      name: { $regex: `^${name}$`, $options: \"i\" },\n      building: { $regex: `^${building}$`, $options: \"i\" },\n      floor: { $regex: `^${floor}$`, $options: \"i\" }\n    });\n    if (existingRoom) {\n      return json({\n        success: false,\n        message: \"A room with this name already exists in the same building and floor\"\n      }, { status: 409 });\n    }\n    const newRoom = {\n      name,\n      building,\n      floor,\n      status: \"available\",\n      assigned_to: null,\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    const result = await roomsCollection.insertOne(newRoom);\n    newRoom._id = result.insertedId;\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"room_created\",\n        user,\n        {\n          room_name: newRoom.name,\n          building: newRoom.building,\n          floor: newRoom.floor\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging room creation activity:\", logError);\n    }\n    const formattedRoom = {\n      id: newRoom._id.toString(),\n      name: newRoom.name,\n      building: newRoom.building,\n      floor: newRoom.floor,\n      status: newRoom.status,\n      assignedTo: newRoom.assigned_to,\n      createdDate: new Date(newRoom.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(newRoom.updated_at).toLocaleDateString(\"en-US\"),\n      assignedSections: []\n    };\n    return json({\n      success: true,\n      message: `Room \"${name}\" created successfully`,\n      data: formattedRoom\n    });\n  } catch (error) {\n    console.error(\"Error creating room:\", error);\n    return json({\n      success: false,\n      message: \"Failed to create room: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function PATCH({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { roomId, sectionIds, action } = data;\n    if (!roomId || !action) {\n      return json({\n        success: false,\n        message: \"Room ID and action are required\"\n      }, { status: 400 });\n    }\n    if (action === \"assign\" && (!sectionIds || !Array.isArray(sectionIds) || sectionIds.length === 0)) {\n      return json({\n        success: false,\n        message: \"Section IDs are required for assignment\"\n      }, { status: 400 });\n    }\n    const db = await connectToDatabase();\n    const roomsCollection = db.collection(\"rooms\");\n    const sectionsCollection = db.collection(\"sections\");\n    const room = await roomsCollection.findOne({ _id: new ObjectId(roomId) });\n    if (!room) {\n      return json({\n        success: false,\n        message: \"Room not found\"\n      }, { status: 404 });\n    }\n    if (action === \"assign\") {\n      const sectionObjectIds = sectionIds.map((id) => new ObjectId(id));\n      const sections = await sectionsCollection.find({\n        _id: { $in: sectionObjectIds },\n        status: \"active\"\n      }).toArray();\n      if (sections.length !== sectionIds.length) {\n        return json({\n          success: false,\n          message: \"One or more sections not found or inactive\"\n        }, { status: 404 });\n      }\n      const conflictingSections = sections.filter(\n        (section) => section.room_id && section.room_id.toString() !== roomId\n      );\n      if (conflictingSections.length > 0) {\n        return json({\n          success: false,\n          message: `Some sections are already assigned to other rooms: ${conflictingSections.map((s) => s.name).join(\", \")}`\n        }, { status: 409 });\n      }\n      await sectionsCollection.updateMany(\n        { _id: { $in: sectionObjectIds } },\n        {\n          $set: {\n            room_id: new ObjectId(roomId),\n            updated_at: /* @__PURE__ */ new Date()\n          }\n        }\n      );\n      await roomsCollection.updateOne(\n        { _id: new ObjectId(roomId) },\n        {\n          $set: {\n            status: \"assigned\",\n            updated_at: /* @__PURE__ */ new Date()\n          }\n        }\n      );\n      try {\n        const user = await getUserFromRequest(request);\n        const ip_address = getClientAddress();\n        const user_agent = request.headers.get(\"user-agent\");\n        await logActivityWithUser(\n          \"room_sections_assigned\",\n          user,\n          {\n            room_id: roomId,\n            room_name: room.name,\n            section_ids: sectionIds,\n            section_names: sections.map((s) => s.name)\n          },\n          ip_address,\n          user_agent\n        );\n      } catch (logError) {\n        console.error(\"Error logging room assignment activity:\", logError);\n      }\n      return json({\n        success: true,\n        message: `Sections assigned to room \"${room.name}\" successfully`\n      });\n    } else if (action === \"unassign\") {\n      const unassignResult = await sectionsCollection.find({ room_id: new ObjectId(roomId) }).toArray();\n      await sectionsCollection.updateMany(\n        { room_id: new ObjectId(roomId) },\n        {\n          $unset: { room_id: \"\" },\n          $set: { updated_at: /* @__PURE__ */ new Date() }\n        }\n      );\n      await roomsCollection.updateOne(\n        { _id: new ObjectId(roomId) },\n        {\n          $set: {\n            status: \"available\",\n            updated_at: /* @__PURE__ */ new Date()\n          }\n        }\n      );\n      try {\n        const user = await getUserFromRequest(request);\n        const ip_address = getClientAddress();\n        const user_agent = request.headers.get(\"user-agent\");\n        await logActivityWithUser(\n          \"room_sections_unassigned\",\n          user,\n          {\n            room_id: roomId,\n            room_name: room.name,\n            unassigned_sections: unassignResult.map((s) => ({ id: s._id.toString(), name: s.name }))\n          },\n          ip_address,\n          user_agent\n        );\n      } catch (logError) {\n        console.error(\"Error logging room unassignment activity:\", logError);\n      }\n      return json({\n        success: true,\n        message: `All sections unassigned from room \"${room.name}\" successfully`\n      });\n    } else {\n      return json({\n        success: false,\n        message: 'Invalid action. Use \"assign\" or \"unassign\"'\n      }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Error managing room-section assignment:\", error);\n    return json({\n      success: false,\n      message: \"Failed to manage room-section assignment: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { id, name, building, floor, status, assignedTo } = data;\n    if (!id || !name || !building || !floor) {\n      return json({\n        success: false,\n        message: \"ID, name, building, and floor are required\"\n      }, { status: 400 });\n    }\n    const db = await connectToDatabase();\n    const roomsCollection = db.collection(\"rooms\");\n    const existingRoom = await roomsCollection.findOne({ _id: new ObjectId(id) });\n    if (!existingRoom) {\n      return json({\n        success: false,\n        message: \"Room not found\"\n      }, { status: 404 });\n    }\n    const nameConflict = await roomsCollection.findOne({\n      name: { $regex: `^${name}$`, $options: \"i\" },\n      building: { $regex: `^${building}$`, $options: \"i\" },\n      floor: { $regex: `^${floor}$`, $options: \"i\" },\n      _id: { $ne: new ObjectId(id) }\n    });\n    if (nameConflict) {\n      return json({\n        success: false,\n        message: \"A room with this name already exists in the same building and floor\"\n      }, { status: 409 });\n    }\n    const updateData = {\n      name,\n      building,\n      floor,\n      status: status || \"available\",\n      assigned_to: assignedTo || null,\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    await roomsCollection.updateOne(\n      { _id: new ObjectId(id) },\n      { $set: updateData }\n    );\n    const updatedRoom = await roomsCollection.findOne({ _id: new ObjectId(id) });\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"room_updated\",\n        user,\n        {\n          room_id: id,\n          name: updatedRoom.name,\n          building: updatedRoom.building,\n          floor: updatedRoom.floor,\n          status: updatedRoom.status,\n          assigned_to: updatedRoom.assigned_to\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging room update activity:\", logError);\n    }\n    const formattedRoom = {\n      id: updatedRoom._id.toString(),\n      name: updatedRoom.name,\n      building: updatedRoom.building,\n      floor: updatedRoom.floor,\n      status: updatedRoom.status,\n      assignedTo: updatedRoom.assigned_to,\n      createdDate: new Date(updatedRoom.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(updatedRoom.updated_at).toLocaleDateString(\"en-US\")\n    };\n    return json({\n      success: true,\n      message: `Room \"${name}\" updated successfully`,\n      data: formattedRoom\n    });\n  } catch (error) {\n    console.error(\"Error updating room:\", error);\n    return json({\n      success: false,\n      message: \"Failed to update room: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function DELETE({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { id } = data;\n    if (!id) {\n      return json({\n        success: false,\n        message: \"Room ID is required\"\n      }, { status: 400 });\n    }\n    const db = await connectToDatabase();\n    const roomsCollection = db.collection(\"rooms\");\n    const existingRoom = await roomsCollection.findOne({ _id: new ObjectId(id) });\n    if (!existingRoom) {\n      return json({\n        success: false,\n        message: \"Room not found\"\n      }, { status: 404 });\n    }\n    await roomsCollection.deleteOne({ _id: new ObjectId(id) });\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"room_deleted\",\n        user,\n        {\n          room_name: existingRoom.name,\n          building: existingRoom.building,\n          floor: existingRoom.floor,\n          room_id: id\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging room deletion activity:\", logError);\n    }\n    return json({\n      success: true,\n      message: `Room \"${existingRoom.name}\" has been removed successfully`\n    });\n  } catch (error) {\n    console.error(\"Error deleting room:\", error);\n    return json({\n      success: false,\n      message: \"Failed to delete room: \" + error.message\n    }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  PATCH,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}