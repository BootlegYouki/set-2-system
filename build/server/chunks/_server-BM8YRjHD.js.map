{"version":3,"file":"_server-BM8YRjHD.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/auth/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { c as client } from \"../../../../chunks/db.js\";\nimport bcrypt from \"bcrypt\";\nasync function POST({ request, getClientAddress }) {\n  try {\n    const { accountNumber, password } = await request.json();\n    if (!accountNumber || !password) {\n      return json({ error: \"Account number and password are required\" }, { status: 400 });\n    }\n    if (typeof accountNumber !== \"string\" || typeof password !== \"string\") {\n      return json({ error: \"Invalid input format\" }, { status: 400 });\n    }\n    const sanitizedAccountNumber = accountNumber.replace(/[^a-zA-Z0-9\\-_]/g, \"\");\n    if (sanitizedAccountNumber !== accountNumber || accountNumber.length > 50) {\n      return json({ error: \"Invalid account number format\" }, { status: 400 });\n    }\n    if (password.length > 200) {\n      return json({ error: \"Password too long\" }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME || \"set-2-system\");\n    const usersCollection = db.collection(\"users\");\n    const user = await usersCollection.findOne({\n      account_number: sanitizedAccountNumber,\n      $or: [\n        { status: { $exists: false } },\n        { status: null },\n        { status: \"active\" }\n      ]\n    });\n    if (!user) {\n      return json({ error: \"Invalid account number or password\" }, { status: 401 });\n    }\n    const isPasswordValid = await bcrypt.compare(password, user.password_hash);\n    if (!isPasswordValid) {\n      return json({ error: \"Invalid account number or password\" }, { status: 401 });\n    }\n    const userData = {\n      id: user._id,\n      name: user.full_name,\n      firstName: user.first_name,\n      gender: user.gender,\n      accountNumber: user.account_number,\n      accountType: user.account_type\n    };\n    try {\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityLogsCollection = db.collection(\"activity_logs\");\n      await activityLogsCollection.insertOne({\n        activity_type: \"user_login\",\n        user_id: user._id,\n        user_account_number: user.account_number,\n        activity_data: {\n          full_name: user.full_name,\n          account_type: user.account_type\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging login activity:\", logError);\n    }\n    return json({\n      success: true,\n      user: userData,\n      message: \"Login successful\"\n    });\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Authentication failed. Please try again.\" }, { status: 500 });\n  }\n}\nexport {\n  POST\n};\n"],"names":[],"mappings":";;;;;;AAGA,eAAe,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAAE;AACnD,EAAE,IAAI;AACN,IAAI,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE;AAC5D,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,QAAQ,EAAE;AACrC,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,0CAA0C,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACzF,IAAI;AACJ,IAAI,IAAI,OAAO,aAAa,KAAK,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAC3E,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACrE,IAAI;AACJ,IAAI,MAAM,sBAAsB,GAAG,aAAa,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;AAChF,IAAI,IAAI,sBAAsB,KAAK,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,EAAE,EAAE;AAC/E,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,+BAA+B,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAC9E,IAAI;AACJ,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE;AAC/B,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAClE,IAAI;AACJ,IAAI,MAAM,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,cAAc,CAAC;AACvE,IAAI,MAAM,eAAe,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;AAClD,IAAI,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC,OAAO,CAAC;AAC/C,MAAM,cAAc,EAAE,sBAAsB;AAC5C,MAAM,GAAG,EAAE;AACX,QAAQ,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;AACtC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE;AACxB,QAAQ,EAAE,MAAM,EAAE,QAAQ;AAC1B;AACA,KAAK,CAAC;AACN,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,oCAAoC,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACnF,IAAI;AACJ,IAAI,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC;AAC9E,IAAI,IAAI,CAAC,eAAe,EAAE;AAC1B,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,oCAAoC,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACnF,IAAI;AACJ,IAAI,MAAM,QAAQ,GAAG;AACrB,MAAM,EAAE,EAAE,IAAI,CAAC,GAAG;AAClB,MAAM,IAAI,EAAE,IAAI,CAAC,SAAS;AAC1B,MAAM,SAAS,EAAE,IAAI,CAAC,UAAU;AAChC,MAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,MAAM,aAAa,EAAE,IAAI,CAAC,cAAc;AACxC,MAAM,WAAW,EAAE,IAAI,CAAC;AACxB,KAAK;AACL,IAAI,IAAI;AACR,MAAM,MAAM,UAAU,GAAG,gBAAgB,EAAE;AAC3C,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;AAC1D,MAAM,MAAM,sBAAsB,GAAG,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC;AACnE,MAAM,MAAM,sBAAsB,CAAC,SAAS,CAAC;AAC7C,QAAQ,aAAa,EAAE,YAAY;AACnC,QAAQ,OAAO,EAAE,IAAI,CAAC,GAAG;AACzB,QAAQ,mBAAmB,EAAE,IAAI,CAAC,cAAc;AAChD,QAAQ,aAAa,EAAE;AACvB,UAAU,SAAS,EAAE,IAAI,CAAC,SAAS;AACnC,UAAU,YAAY,EAAE,IAAI,CAAC;AAC7B,SAAS;AACT,QAAQ,UAAU;AAClB,QAAQ,UAAU;AAClB,QAAQ,UAAU,kBAAkB,IAAI,IAAI;AAC5C,OAAO,CAAC;AACR,IAAI,CAAC,CAAC,OAAO,QAAQ,EAAE;AACvB,MAAM,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,QAAQ,CAAC;AAC9D,IAAI;AACJ,IAAI,OAAO,IAAI,CAAC;AAChB,MAAM,OAAO,EAAE,IAAI;AACnB,MAAM,IAAI,EAAE,QAAQ;AACpB,MAAM,OAAO,EAAE;AACf,KAAK,CAAC;AACN,EAAE,CAAC,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC;AACjD,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;AACrE,MAAM,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAC3E,IAAI;AACJ,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,0CAA0C,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACvF,EAAE;AACF;;;;"}