{"version":3,"file":"_server-KBq4LS5O.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/rooms/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { q as query } from \"../../../../chunks/db.js\";\nimport { g as getUserFromRequest, l as logActivityWithUser } from \"../../../../chunks/auth-helper.js\";\nasync function GET({ url }) {\n  try {\n    const searchTerm = url.searchParams.get(\"search\") || \"\";\n    const building = url.searchParams.get(\"building\");\n    const status = url.searchParams.get(\"status\");\n    let sqlQuery = `\n      SELECT \n        r.id,\n        r.name,\n        r.building,\n        r.floor,\n        r.status,\n        r.assigned_to,\n        r.created_at,\n        r.updated_at,\n        s.id as section_id,\n        s.name as section_name,\n        s.grade_level,\n        s.school_year\n      FROM rooms r\n      LEFT JOIN sections s ON r.id = s.room_id AND s.status = 'active'\n    `;\n    const params = [];\n    let paramIndex = 1;\n    let whereAdded = false;\n    if (searchTerm) {\n      sqlQuery += ` WHERE (LOWER(r.name) LIKE $${paramIndex} OR LOWER(r.building) LIKE $${paramIndex} OR LOWER(r.floor) LIKE $${paramIndex})`;\n      params.push(`%${searchTerm.toLowerCase()}%`);\n      paramIndex++;\n      whereAdded = true;\n    }\n    if (building && building !== \"\") {\n      sqlQuery += whereAdded ? ` AND LOWER(r.building) = $${paramIndex}` : ` WHERE LOWER(r.building) = $${paramIndex}`;\n      params.push(building.toLowerCase());\n      paramIndex++;\n      whereAdded = true;\n    }\n    if (status && status !== \"\") {\n      sqlQuery += whereAdded ? ` AND r.status = $${paramIndex}` : ` WHERE r.status = $${paramIndex}`;\n      params.push(status);\n      paramIndex++;\n    }\n    sqlQuery += \" ORDER BY r.created_at DESC\";\n    const result = await query(sqlQuery, params);\n    const roomsMap = /* @__PURE__ */ new Map();\n    result.rows.forEach((row) => {\n      const roomId = row.id;\n      if (!roomsMap.has(roomId)) {\n        roomsMap.set(roomId, {\n          id: row.id,\n          name: row.name,\n          building: row.building,\n          floor: row.floor,\n          status: row.status,\n          assignedTo: row.assigned_to,\n          createdDate: new Date(row.created_at).toLocaleDateString(\"en-US\"),\n          updatedDate: new Date(row.updated_at).toLocaleDateString(\"en-US\"),\n          assignedSections: []\n        });\n      }\n      if (row.section_id) {\n        roomsMap.get(roomId).assignedSections.push({\n          id: row.section_id,\n          name: row.section_name,\n          gradeLevel: row.grade_level,\n          schoolYear: row.school_year\n        });\n      }\n    });\n    const rooms = Array.from(roomsMap.values());\n    return json({\n      success: true,\n      data: rooms\n    });\n  } catch (error) {\n    console.error(\"Error fetching rooms:\", error);\n    return json({\n      success: false,\n      message: \"Failed to fetch rooms: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function POST({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { name, building, floor } = data;\n    if (!name || !building || !floor) {\n      return json({\n        success: false,\n        message: \"Name, building, and floor are required\"\n      }, { status: 400 });\n    }\n    const existingRoom = await query(\n      \"SELECT id FROM rooms WHERE LOWER(name) = $1 AND LOWER(building) = $2 AND LOWER(floor) = $3\",\n      [name.toLowerCase(), building.toLowerCase(), floor.toLowerCase()]\n    );\n    if (existingRoom.rows.length > 0) {\n      return json({\n        success: false,\n        message: \"A room with this name already exists in the same building and floor\"\n      }, { status: 409 });\n    }\n    const result = await query(\n      `INSERT INTO rooms (name, building, floor) \n       VALUES ($1, $2, $3) \n       RETURNING id, name, building, floor, status, assigned_to, created_at, updated_at`,\n      [name, building, floor]\n    );\n    const newRoom = result.rows[0];\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"room_created\",\n        user,\n        {\n          room_name: newRoom.name,\n          building: newRoom.building,\n          floor: newRoom.floor\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging room creation activity:\", logError);\n    }\n    const formattedRoom = {\n      id: newRoom.id,\n      name: newRoom.name,\n      building: newRoom.building,\n      floor: newRoom.floor,\n      status: newRoom.status,\n      assignedTo: newRoom.assigned_to,\n      createdDate: new Date(newRoom.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(newRoom.updated_at).toLocaleDateString(\"en-US\"),\n      assignedSections: []\n    };\n    return json({\n      success: true,\n      message: `Room \"${name}\" created successfully`,\n      data: formattedRoom\n    });\n  } catch (error) {\n    console.error(\"Error creating room:\", error);\n    return json({\n      success: false,\n      message: \"Failed to create room: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function PATCH({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { roomId, sectionIds, action } = data;\n    if (!roomId || !action) {\n      return json({\n        success: false,\n        message: \"Room ID and action are required\"\n      }, { status: 400 });\n    }\n    if (action === \"assign\" && (!sectionIds || !Array.isArray(sectionIds) || sectionIds.length === 0)) {\n      return json({\n        success: false,\n        message: \"Section IDs are required for assignment\"\n      }, { status: 400 });\n    }\n    const roomCheck = await query(\"SELECT id, name FROM rooms WHERE id = $1\", [roomId]);\n    if (roomCheck.rows.length === 0) {\n      return json({\n        success: false,\n        message: \"Room not found\"\n      }, { status: 404 });\n    }\n    const room = roomCheck.rows[0];\n    if (action === \"assign\") {\n      const sectionCheck = await query(\n        \"SELECT id, name, room_id FROM sections WHERE id = ANY($1) AND status = $2\",\n        [sectionIds, \"active\"]\n      );\n      if (sectionCheck.rows.length !== sectionIds.length) {\n        return json({\n          success: false,\n          message: \"One or more sections not found or inactive\"\n        }, { status: 404 });\n      }\n      const conflictingSections = sectionCheck.rows.filter(\n        (section) => section.room_id && section.room_id !== roomId\n      );\n      if (conflictingSections.length > 0) {\n        return json({\n          success: false,\n          message: `Some sections are already assigned to other rooms: ${conflictingSections.map((s) => s.name).join(\", \")}`\n        }, { status: 409 });\n      }\n      await query(\n        \"UPDATE sections SET room_id = $1, updated_at = CURRENT_TIMESTAMP WHERE id = ANY($2)\",\n        [roomId, sectionIds]\n      );\n      await query(\n        \"UPDATE rooms SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2\",\n        [\"assigned\", roomId]\n      );\n      try {\n        const user = await getUserFromRequest(request);\n        const ip_address = getClientAddress();\n        const user_agent = request.headers.get(\"user-agent\");\n        await logActivityWithUser(\n          \"room_sections_assigned\",\n          user,\n          {\n            room_id: roomId,\n            room_name: room.name,\n            section_ids: sectionIds,\n            section_names: sectionCheck.rows.map((s) => s.name)\n          },\n          ip_address,\n          user_agent\n        );\n      } catch (logError) {\n        console.error(\"Error logging room assignment activity:\", logError);\n      }\n      return json({\n        success: true,\n        message: `Sections assigned to room \"${room.name}\" successfully`\n      });\n    } else if (action === \"unassign\") {\n      const unassignResult = await query(\n        \"UPDATE sections SET room_id = NULL, updated_at = CURRENT_TIMESTAMP WHERE room_id = $1 RETURNING id, name\",\n        [roomId]\n      );\n      await query(\n        \"UPDATE rooms SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2\",\n        [\"available\", roomId]\n      );\n      try {\n        const user = await getUserFromRequest(request);\n        const ip_address = getClientAddress();\n        const user_agent = request.headers.get(\"user-agent\");\n        await logActivityWithUser(\n          \"room_sections_unassigned\",\n          user,\n          {\n            room_id: roomId,\n            room_name: room.name,\n            unassigned_sections: unassignResult.rows.map((s) => ({ id: s.id, name: s.name }))\n          },\n          ip_address,\n          user_agent\n        );\n      } catch (logError) {\n        console.error(\"Error logging room unassignment activity:\", logError);\n      }\n      return json({\n        success: true,\n        message: `All sections unassigned from room \"${room.name}\" successfully`\n      });\n    } else {\n      return json({\n        success: false,\n        message: 'Invalid action. Use \"assign\" or \"unassign\"'\n      }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Error managing room-section assignment:\", error);\n    return json({\n      success: false,\n      message: \"Failed to manage room-section assignment: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { id, name, building, floor, status, assignedTo } = data;\n    if (!id || !name || !building || !floor) {\n      return json({\n        success: false,\n        message: \"ID, name, building, and floor are required\"\n      }, { status: 400 });\n    }\n    const existingRoom = await query(\n      \"SELECT id, name FROM rooms WHERE id = $1\",\n      [id]\n    );\n    if (existingRoom.rows.length === 0) {\n      return json({\n        success: false,\n        message: \"Room not found\"\n      }, { status: 404 });\n    }\n    const nameConflict = await query(\n      \"SELECT id FROM rooms WHERE LOWER(name) = $1 AND LOWER(building) = $2 AND LOWER(floor) = $3 AND id != $4\",\n      [name.toLowerCase(), building.toLowerCase(), floor.toLowerCase(), id]\n    );\n    if (nameConflict.rows.length > 0) {\n      return json({\n        success: false,\n        message: \"A room with this name already exists in the same building and floor\"\n      }, { status: 409 });\n    }\n    const result = await query(\n      `UPDATE rooms \n       SET name = $1, building = $2, floor = $3, status = $4, assigned_to = $5, updated_at = CURRENT_TIMESTAMP\n       WHERE id = $6\n       RETURNING id, name, building, floor, status, assigned_to, created_at, updated_at`,\n      [name, building, floor, status || \"available\", assignedTo || null, id]\n    );\n    const updatedRoom = result.rows[0];\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"room_updated\",\n        user,\n        {\n          room_id: id,\n          name: updatedRoom.name,\n          building: updatedRoom.building,\n          floor: updatedRoom.floor,\n          status: updatedRoom.status,\n          assigned_to: updatedRoom.assigned_to\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging room update activity:\", logError);\n    }\n    const formattedRoom = {\n      id: updatedRoom.id,\n      name: updatedRoom.name,\n      building: updatedRoom.building,\n      floor: updatedRoom.floor,\n      status: updatedRoom.status,\n      assignedTo: updatedRoom.assigned_to,\n      createdDate: new Date(updatedRoom.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(updatedRoom.updated_at).toLocaleDateString(\"en-US\")\n    };\n    return json({\n      success: true,\n      message: `Room \"${name}\" updated successfully`,\n      data: formattedRoom\n    });\n  } catch (error) {\n    console.error(\"Error updating room:\", error);\n    return json({\n      success: false,\n      message: \"Failed to update room: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function DELETE({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { id } = data;\n    if (!id) {\n      return json({\n        success: false,\n        message: \"Room ID is required\"\n      }, { status: 400 });\n    }\n    const existingRoom = await query(\n      \"SELECT id, name, building, floor FROM rooms WHERE id = $1\",\n      [id]\n    );\n    if (existingRoom.rows.length === 0) {\n      return json({\n        success: false,\n        message: \"Room not found\"\n      }, { status: 404 });\n    }\n    await query(\n      \"DELETE FROM rooms WHERE id = $1\",\n      [id]\n    );\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      await logActivityWithUser(\n        \"room_deleted\",\n        user,\n        {\n          room_name: existingRoom.rows[0].name,\n          building: existingRoom.rows[0].building,\n          floor: existingRoom.rows[0].floor,\n          room_id: id\n        },\n        ip_address,\n        user_agent\n      );\n    } catch (logError) {\n      console.error(\"Error logging room deletion activity:\", logError);\n    }\n    return json({\n      success: true,\n      message: `Room \"${existingRoom.rows[0].name}\" has been removed successfully`\n    });\n  } catch (error) {\n    console.error(\"Error deleting room:\", error);\n    return json({\n      success: false,\n      message: \"Failed to delete room: \" + error.message\n    }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  PATCH,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}