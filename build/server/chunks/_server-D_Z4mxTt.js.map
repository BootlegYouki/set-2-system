{"version":3,"file":"_server-D_Z4mxTt.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/activity-types/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { c as client } from \"../../../../chunks/db.js\";\nimport { ObjectId } from \"mongodb\";\nimport { g as getUserFromRequest } from \"../../../../chunks/auth-helper.js\";\nfunction getRandomColor() {\n  const colors = [\n    \"#FF6B6B\",\n    \"#4ECDC4\",\n    \"#45B7D1\",\n    \"#96CEB4\",\n    \"#FFEAA7\",\n    \"#DDA0DD\",\n    \"#98D8C8\",\n    \"#F7DC6F\",\n    \"#BB8FCE\",\n    \"#85C1E9\",\n    \"#F8C471\",\n    \"#82E0AA\",\n    \"#F1948A\",\n    \"#85C1E9\",\n    \"#D7BDE2\"\n  ];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\nasync function GET({ url }) {\n  try {\n    const searchTerm = url.searchParams.get(\"search\") || \"\";\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const activityTypesCollection = db.collection(\"activity_types\");\n    let filter = {};\n    if (searchTerm) {\n      filter = {\n        $or: [\n          { name: { $regex: searchTerm, $options: \"i\" } },\n          { code: { $regex: searchTerm, $options: \"i\" } }\n        ]\n      };\n    }\n    const activityTypes = await activityTypesCollection.find(filter).toArray();\n    const formattedActivityTypes = activityTypes.map((activity) => ({\n      id: activity._id.toString(),\n      name: activity.name,\n      code: activity.code,\n      color: activity.color,\n      icon: activity.icon,\n      createdAt: activity.created_at,\n      createdDate: new Date(activity.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(activity.updated_at || activity.created_at).toLocaleDateString(\"en-US\")\n    }));\n    return json({\n      success: true,\n      data: formattedActivityTypes\n    });\n  } catch (error) {\n    console.error(\"Error fetching activity types:\", error);\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({\n        success: false,\n        message: \"Database connection failed\"\n      }, { status: 503 });\n    }\n    return json({\n      success: false,\n      message: \"Failed to fetch activity types: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function POST({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { name, code, icon } = data;\n    if (!name || !code) {\n      return json({\n        success: false,\n        message: \"Name and code are required\"\n      }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const activityTypesCollection = db.collection(\"activity_types\");\n    const existingActivity = await activityTypesCollection.findOne({ code: code.trim().toUpperCase() });\n    if (existingActivity) {\n      return json({\n        success: false,\n        message: \"Activity type code already exists\"\n      }, { status: 409 });\n    }\n    const randomColor = getRandomColor();\n    const newActivityData = {\n      name: name.trim(),\n      code: code.trim().toUpperCase(),\n      color: randomColor,\n      icon: icon || \"event\",\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    const result = await activityTypesCollection.insertOne(newActivityData);\n    if (!result.insertedId) {\n      return json({\n        success: false,\n        message: \"Failed to create activity type\"\n      }, { status: 500 });\n    }\n    const newActivity = await activityTypesCollection.findOne({ _id: result.insertedId });\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"activity_type_created\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.accountNumber || null,\n        activity_data: {\n          name: newActivity.name,\n          code: newActivity.code,\n          color: newActivity.color,\n          icon: newActivity.icon\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging activity type creation activity:\", logError);\n    }\n    const formattedActivity = {\n      id: newActivity._id.toString(),\n      name: newActivity.name,\n      code: newActivity.code,\n      color: newActivity.color,\n      icon: newActivity.icon,\n      createdAt: newActivity.created_at,\n      createdDate: new Date(newActivity.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(newActivity.updated_at).toLocaleDateString(\"en-US\")\n    };\n    return json({\n      success: true,\n      message: \"Activity type created successfully\",\n      data: formattedActivity\n    });\n  } catch (error) {\n    console.error(\"Error creating activity type:\", error);\n    if (error.code === 11e3) {\n      return json({\n        success: false,\n        message: \"Activity type code already exists\"\n      }, { status: 409 });\n    }\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({\n        success: false,\n        message: \"Database connection failed\"\n      }, { status: 503 });\n    }\n    return json({\n      success: false,\n      message: \"Failed to create activity type: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { id, name, code, icon } = data;\n    if (!id || !name || !code) {\n      return json({\n        success: false,\n        message: \"ID, name, and code are required\"\n      }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const activityTypesCollection = db.collection(\"activity_types\");\n    const existingActivity = await activityTypesCollection.findOne({ _id: new ObjectId(id) });\n    if (!existingActivity) {\n      return json({\n        success: false,\n        message: \"Activity type not found\"\n      }, { status: 404 });\n    }\n    if (existingActivity.code !== code) {\n      const codeExists = await activityTypesCollection.findOne({\n        code,\n        _id: { $ne: new ObjectId(id) }\n      });\n      if (codeExists) {\n        return json({\n          success: false,\n          message: \"Activity type code already exists\"\n        }, { status: 409 });\n      }\n    }\n    const updateData = {\n      name: name.trim(),\n      code: code.trim().toUpperCase(),\n      icon: icon || existingActivity.icon,\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    const result = await activityTypesCollection.updateOne(\n      { _id: new ObjectId(id) },\n      { $set: updateData }\n    );\n    if (result.matchedCount === 0) {\n      return json({\n        success: false,\n        message: \"Activity type not found\"\n      }, { status: 404 });\n    }\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"activity_type_updated\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.accountNumber || null,\n        activity_data: {\n          id,\n          name: updateData.name,\n          code: updateData.code,\n          icon: updateData.icon,\n          previous_name: existingActivity.name,\n          previous_code: existingActivity.code,\n          previous_icon: existingActivity.icon\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging activity type update activity:\", logError);\n    }\n    const updatedActivity = await activityTypesCollection.findOne({ _id: new ObjectId(id) });\n    const formattedActivity = {\n      id: updatedActivity._id.toString(),\n      name: updatedActivity.name,\n      code: updatedActivity.code,\n      color: updatedActivity.color,\n      icon: updatedActivity.icon,\n      createdAt: updatedActivity.created_at,\n      createdDate: new Date(updatedActivity.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(updatedActivity.updated_at).toLocaleDateString(\"en-US\")\n    };\n    return json({\n      success: true,\n      message: `Activity type \"${name}\" updated successfully`,\n      data: formattedActivity\n    });\n  } catch (error) {\n    console.error(\"Error updating activity type:\", error);\n    if (error.code === 11e3) {\n      return json({\n        success: false,\n        message: \"Activity type code already exists\"\n      }, { status: 409 });\n    }\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({\n        success: false,\n        message: \"Database connection failed\"\n      }, { status: 503 });\n    }\n    return json({\n      success: false,\n      message: \"Failed to update activity type: \" + error.message\n    }, { status: 500 });\n  }\n}\nasync function DELETE({ request, getClientAddress }) {\n  try {\n    const data = await request.json();\n    const { id } = data;\n    if (!id) {\n      return json({\n        success: false,\n        message: \"Activity type ID is required\"\n      }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const activityTypesCollection = db.collection(\"activity_types\");\n    const existingActivity = await activityTypesCollection.findOne({ _id: new ObjectId(id) });\n    if (!existingActivity) {\n      return json({\n        success: false,\n        message: \"Activity type not found\"\n      }, { status: 404 });\n    }\n    const result = await activityTypesCollection.deleteOne({ _id: new ObjectId(id) });\n    if (result.deletedCount === 0) {\n      return json({\n        success: false,\n        message: \"Activity type not found\"\n      }, { status: 404 });\n    }\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"activity_type_deleted\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.accountNumber || null,\n        activity_data: {\n          id,\n          name: existingActivity.name,\n          code: existingActivity.code,\n          color: existingActivity.color,\n          icon: existingActivity.icon\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging activity type deletion activity:\", logError);\n    }\n    return json({\n      success: true,\n      message: `Activity type \"${existingActivity.name}\" deleted successfully`\n    });\n  } catch (error) {\n    console.error(\"Error deleting activity type:\", error);\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({\n        success: false,\n        message: \"Database connection failed\"\n      }, { status: 503 });\n    }\n    return json({\n      success: false,\n      message: \"Failed to delete activity type: \" + error.message\n    }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}