{"version":3,"file":"_server-D61YklSQ.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/accounts/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { c as client } from \"../../../../chunks/db.js\";\nimport bcrypt from \"bcrypt\";\nimport { g as getUserFromRequest } from \"../../../../chunks/auth-helper.js\";\nimport { sendAccountCreationEmail } from \"../../../../chunks/email-helper.js\";\nimport { ObjectId } from \"mongodb\";\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nasync function POST({ request, getClientAddress }) {\n  try {\n    const { accountType, gender, gradeLevel, firstName, lastName, middleInitial, email, birthdate, address, guardian, contactNumber, createdBy } = await request.json();\n    if (!accountType || !gender || !firstName || !lastName) {\n      return json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n    if ((accountType === \"student\" || accountType === \"teacher\") && !email) {\n      return json({ error: \"Email is required for students and teachers\" }, { status: 400 });\n    }\n    if (email && !EMAIL_REGEX.test(email)) {\n      return json({ error: \"Invalid email format\" }, { status: 400 });\n    }\n    if (email) {\n      const db2 = client.db(process.env.MONGODB_DB_NAME);\n      const usersCollection2 = db2.collection(\"users\");\n      const existingEmail = await usersCollection2.findOne({\n        email: email.toLowerCase(),\n        $or: [\n          { status: { $exists: false } },\n          { status: \"active\" }\n        ]\n      });\n      if (existingEmail) {\n        return json({ error: \"This email is already registered\" }, { status: 409 });\n      }\n    }\n    if (accountType === \"student\" && !gradeLevel) {\n      return json({ error: \"Grade level is required for students\" }, { status: 400 });\n    }\n    if (accountType === \"student\") {\n      if (!birthdate || !address || !guardian || !contactNumber) {\n        return json({ error: \"Birthdate, address, guardian, and contact number are required for students\" }, { status: 400 });\n      }\n    }\n    let age = null;\n    if (accountType === \"student\" && birthdate) {\n      const birthDate = new Date(birthdate);\n      const today = /* @__PURE__ */ new Date();\n      age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n        age--;\n      }\n    }\n    const accountNumber = await generateAccountNumber(accountType);\n    const hashedPassword = await bcrypt.hash(accountNumber, 10);\n    const fullName = `${lastName}, ${firstName}${middleInitial ? \" \" + middleInitial + \".\" : \"\"}`;\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const usersCollection = db.collection(\"users\");\n    const userDoc = {\n      account_number: accountNumber,\n      account_type: accountType,\n      first_name: firstName,\n      last_name: lastName,\n      middle_initial: middleInitial || null,\n      full_name: fullName,\n      gender,\n      email: email ? email.toLowerCase() : null,\n      // Store email in lowercase\n      grade_level: gradeLevel || null,\n      birthdate: birthdate ? new Date(birthdate) : null,\n      address: address || null,\n      age,\n      guardian: guardian || null,\n      contact_number: contactNumber || null,\n      password_hash: hashedPassword,\n      status: \"active\",\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    const result = await usersCollection.insertOne(userDoc);\n    const newAccount = {\n      id: result.insertedId.toString(),\n      account_number: accountNumber,\n      full_name: fullName,\n      account_type: accountType,\n      created_at: userDoc.created_at,\n      updated_at: userDoc.updated_at\n    };\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"account_created\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.accountNumber || null,\n        activity_data: {\n          account_type: accountType,\n          full_name: fullName,\n          account_number: newAccount.account_number,\n          grade_level: gradeLevel\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging account creation activity:\", logError);\n    }\n    const response = {\n      id: newAccount.id,\n      name: newAccount.full_name,\n      type: accountType === \"student\" ? \"Student\" : accountType === \"teacher\" ? \"Teacher\" : \"Admin\",\n      number: newAccount.account_number,\n      createdDate: new Date(newAccount.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(newAccount.updated_at).toLocaleDateString(\"en-US\"),\n      status: \"active\"\n    };\n    if (email) {\n      sendAccountCreationEmail({\n        email,\n        fullName,\n        accountNumber,\n        accountType\n      }).then((emailResult) => {\n        if (emailResult.success) {\n          console.log(`Account creation email sent to ${email}`);\n        } else {\n          console.error(`Failed to send account creation email to ${email}:`, emailResult.error);\n        }\n      }).catch((emailError) => {\n        console.error(`Error sending account creation email to ${email}:`, emailError);\n      });\n    }\n    return json({ success: true, account: response, emailSent: !!email }, { status: 201 });\n  } catch (error) {\n    console.error(\"Error creating account:\", error);\n    if (error.code === 11e3) {\n      if (error.keyPattern && error.keyPattern.email) {\n        return json({ error: \"An account with this email already exists\" }, { status: 409 });\n      }\n      if (error.keyPattern && error.keyPattern.account_number) {\n        return json({ error: \"Account number already exists\" }, { status: 409 });\n      }\n    }\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to create account. Please try again.\" }, { status: 500 });\n  }\n}\nasync function GET({ url }) {\n  try {\n    const limit = url.searchParams.get(\"limit\");\n    const type = url.searchParams.get(\"type\");\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const usersCollection = db.collection(\"users\");\n    let filter = {\n      $or: [\n        { status: { $exists: false } },\n        { status: \"active\" }\n      ]\n    };\n    if (type) {\n      filter.account_type = type;\n    }\n    let query = usersCollection.find(filter).sort({ created_at: -1 });\n    if (limit && !isNaN(parseInt(limit))) {\n      query = query.limit(parseInt(limit));\n    }\n    const accounts = await query.toArray();\n    const sectionsCollection = db.collection(\"sections\");\n    const activeSections = await sectionsCollection.find({\n      status: \"active\"\n    }).toArray();\n    const adviserSectionMap = /* @__PURE__ */ new Map();\n    activeSections.forEach((section) => {\n      if (section.adviser_id) {\n        adviserSectionMap.set(section.adviser_id.toString(), {\n          name: section.name,\n          grade_level: section.grade_level\n        });\n      }\n    });\n    const formattedAccounts = accounts.map((account) => {\n      const accountId = account._id.toString();\n      const advisorySection = adviserSectionMap.get(accountId);\n      return {\n        id: accountId,\n        name: account.full_name,\n        firstName: account.first_name,\n        lastName: account.last_name,\n        middleInitial: account.middle_initial,\n        email: account.email,\n        type: account.account_type === \"student\" ? \"Student\" : account.account_type === \"teacher\" ? \"Teacher\" : \"Admin\",\n        number: account.account_number,\n        gradeLevel: account.grade_level,\n        birthdate: account.birthdate,\n        address: account.address,\n        age: account.age,\n        guardian: account.guardian,\n        contactNumber: account.contact_number,\n        advisorySection: advisorySection ? `${advisorySection.name} (Grade ${advisorySection.grade_level})` : null,\n        createdDate: new Date(account.created_at).toLocaleDateString(\"en-US\"),\n        updatedDate: new Date(account.updated_at).toLocaleDateString(\"en-US\"),\n        status: \"active\"\n      };\n    });\n    return json({ success: true, accounts: formattedAccounts });\n  } catch (error) {\n    console.error(\"Error fetching accounts:\", error);\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to fetch accounts\" }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  try {\n    const { id, firstName, lastName, middleInitial, gradeLevel, birthdate, address, guardian, contactNumber } = await request.json();\n    if (!id || !firstName || !lastName) {\n      return json({ error: \"Account ID, first name, and last name are required\" }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const usersCollection = db.collection(\"users\");\n    const existingAccount = await usersCollection.findOne({ _id: new ObjectId(id) });\n    if (!existingAccount) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    const accountType = existingAccount.account_type;\n    const oldFullName = existingAccount.full_name;\n    if (accountType === \"student\") {\n      if (!birthdate || !address || !guardian || !contactNumber) {\n        return json({ error: \"Birthdate, address, guardian, and contact number are required for students\" }, { status: 400 });\n      }\n    }\n    let age = null;\n    if (accountType === \"student\" && birthdate) {\n      const birthDate = new Date(birthdate);\n      const today = /* @__PURE__ */ new Date();\n      age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n        age--;\n      }\n    }\n    const fullName = `${lastName}, ${firstName}${middleInitial ? \" \" + middleInitial + \".\" : \"\"}`;\n    let updateDoc = {\n      first_name: firstName,\n      last_name: lastName,\n      middle_initial: middleInitial || null,\n      full_name: fullName,\n      updated_at: /* @__PURE__ */ new Date()\n    };\n    if (accountType === \"student\") {\n      updateDoc = {\n        ...updateDoc,\n        grade_level: gradeLevel || null,\n        birthdate: birthdate ? new Date(birthdate) : null,\n        address: address || null,\n        age,\n        guardian: guardian || null,\n        contact_number: contactNumber || null\n      };\n    }\n    const result = await usersCollection.updateOne(\n      { _id: new ObjectId(id) },\n      { $set: updateDoc }\n    );\n    if (result.matchedCount === 0) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    const updatedAccount = await usersCollection.findOne({ _id: new ObjectId(id) });\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"account_updated\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.accountNumber || null,\n        activity_data: {\n          account_type: updatedAccount.account_type,\n          old_full_name: oldFullName,\n          full_name: updatedAccount.full_name,\n          account_number: updatedAccount.account_number\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging account update activity:\", logError);\n    }\n    const response = {\n      id: updatedAccount._id.toString(),\n      name: updatedAccount.full_name,\n      firstName: updatedAccount.first_name,\n      lastName: updatedAccount.last_name,\n      middleInitial: updatedAccount.middle_initial,\n      type: updatedAccount.account_type === \"student\" ? \"Student\" : updatedAccount.account_type === \"teacher\" ? \"Teacher\" : \"Admin\",\n      number: updatedAccount.account_number,\n      gradeLevel: updatedAccount.grade_level,\n      birthdate: updatedAccount.birthdate,\n      address: updatedAccount.address,\n      age: updatedAccount.age,\n      guardian: updatedAccount.guardian,\n      contactNumber: updatedAccount.contact_number,\n      createdDate: new Date(updatedAccount.created_at).toLocaleDateString(\"en-US\"),\n      updatedDate: new Date(updatedAccount.updated_at).toLocaleDateString(\"en-US\"),\n      status: \"active\"\n    };\n    return json({\n      success: true,\n      message: `Account for \"${updatedAccount.full_name}\" has been updated successfully`,\n      account: response\n    });\n  } catch (error) {\n    console.error(\"Error updating account:\", error);\n    if (error.code === 11e3) {\n      if (error.keyPattern && error.keyPattern.email) {\n        return json({ error: \"An account with this email already exists\" }, { status: 409 });\n      }\n    }\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to update account. Please try again.\" }, { status: 500 });\n  }\n}\nasync function DELETE({ request, getClientAddress }) {\n  try {\n    const { id } = await request.json();\n    if (!id) {\n      return json({ error: \"Account ID is required\" }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const usersCollection = db.collection(\"users\");\n    const account = await usersCollection.findOne({ _id: new ObjectId(id) });\n    if (!account) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    const deleteResult = await usersCollection.deleteOne({ _id: new ObjectId(id) });\n    if (deleteResult.deletedCount === 0) {\n      return json({ error: \"Failed to delete account\" }, { status: 500 });\n    }\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"account_deleted\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.accountNumber || null,\n        activity_data: {\n          account_type: account.account_type,\n          full_name: account.full_name,\n          account_number: account.account_number\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging account deletion activity:\", logError);\n    }\n    const accountTypeLabel = account.account_type === \"student\" ? \"Student\" : account.account_type === \"teacher\" ? \"Teacher\" : \"Admin\";\n    return json({\n      success: true,\n      message: `${accountTypeLabel} \"${account.full_name}\" has been deleted successfully`\n    });\n  } catch (error) {\n    console.error(\"Error deleting account:\", error);\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to delete account. Please try again.\" }, { status: 500 });\n  }\n}\nasync function generateAccountNumber(accountType) {\n  const prefix = accountType === \"student\" ? \"STU\" : accountType === \"teacher\" ? \"TCH\" : \"ADM\";\n  const year = (/* @__PURE__ */ new Date()).getFullYear();\n  const db = client.db(process.env.MONGODB_DB_NAME);\n  const usersCollection = db.collection(\"users\");\n  const existingAccounts = await usersCollection.find({\n    account_number: { $regex: `^${prefix}-${year}-` }\n  }).toArray();\n  const existingNumbers = new Set(\n    existingAccounts.map((account) => {\n      const match = account.account_number.match(/-(\\d+)$/);\n      return match ? parseInt(match[1]) : 0;\n    }).filter((num) => num > 0)\n    // Filter out invalid numbers\n  );\n  let nextNumber = 1;\n  while (existingNumbers.has(nextNumber)) {\n    nextNumber++;\n  }\n  return `${prefix}-${year}-${nextNumber.toString().padStart(4, \"0\")}`;\n}\nasync function PATCH({ request, getClientAddress }) {\n  try {\n    const { id, action } = await request.json();\n    if (!id) {\n      return json({ error: \"Account ID is required\" }, { status: 400 });\n    }\n    if (action !== \"archive\") {\n      return json({ error: 'Invalid action. Only \"archive\" is supported.' }, { status: 400 });\n    }\n    const db = client.db(process.env.MONGODB_DB_NAME);\n    const usersCollection = db.collection(\"users\");\n    const account = await usersCollection.findOne({ _id: new ObjectId(id) });\n    if (!account) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    if (account.account_type !== \"student\") {\n      return json({ error: \"Only student accounts can be archived\" }, { status: 400 });\n    }\n    const updateResult = await usersCollection.updateOne(\n      { _id: new ObjectId(id) },\n      {\n        $set: {\n          status: \"archived\",\n          archived_at: /* @__PURE__ */ new Date(),\n          updated_at: /* @__PURE__ */ new Date()\n        }\n      }\n    );\n    if (updateResult.matchedCount === 0) {\n      return json({ error: \"Account not found\" }, { status: 404 });\n    }\n    try {\n      const user = await getUserFromRequest(request);\n      const ip_address = getClientAddress();\n      const user_agent = request.headers.get(\"user-agent\");\n      const activityCollection = db.collection(\"activity_logs\");\n      await activityCollection.insertOne({\n        activity_type: \"student_archived\",\n        user_id: user?.id ? new ObjectId(user.id) : null,\n        user_account_number: user?.account_number || null,\n        activity_data: {\n          account_type: account.account_type,\n          full_name: account.full_name,\n          account_number: account.account_number\n        },\n        ip_address,\n        user_agent,\n        created_at: /* @__PURE__ */ new Date()\n      });\n    } catch (logError) {\n      console.error(\"Error logging account archiving activity:\", logError);\n    }\n    return json({\n      success: true,\n      message: `Student \"${account.full_name}\" has been archived successfully`\n    });\n  } catch (error) {\n    console.error(\"Error archiving account:\", error);\n    if (error.name === \"MongoNetworkError\" || error.name === \"MongoServerError\") {\n      return json({ error: \"Database connection failed. Please try again.\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to archive account. Please try again.\" }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  PATCH,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}