{"version":3,"file":"_server-CVgYDqPJ.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/sections/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { q as query } from \"../../../../chunks/db.js\";\nimport { g as getUserFromRequest, l as logActivityWithUser } from \"../../../../chunks/auth-helper.js\";\nasync function GET({ url }) {\n  try {\n    const action = url.searchParams.get(\"action\");\n    const gradeLevel = url.searchParams.get(\"gradeLevel\");\n    const schoolYear = url.searchParams.get(\"schoolYear\") || \"2024-2025\";\n    const sectionId = url.searchParams.get(\"sectionId\");\n    switch (action) {\n      case \"available-sections\":\n        const sectionsResult = await query(`\n                    SELECT \n                        id,\n                        name,\n                        grade_level,\n                        school_year,\n                        status,\n                        room_id\n                    FROM sections\n                    WHERE status = 'active'\n                    ORDER BY grade_level, name\n                `);\n        return json({ success: true, data: sectionsResult.rows });\n      case \"available-rooms\":\n        const roomsResult = await query(`\n                    SELECT \n                        r.id,\n                        r.name,\n                        r.building,\n                        r.floor,\n                        r.status,\n                        CASE \n                            WHEN COUNT(s.id) > 0 THEN false\n                            ELSE true\n                        END as available\n                    FROM rooms r\n                    LEFT JOIN sections s ON r.id = s.room_id AND s.status = 'active'\n                    GROUP BY r.id, r.name, r.building, r.floor, r.status\n                    ORDER BY r.building, r.floor, r.name\n                `);\n        return json({ success: true, data: roomsResult.rows });\n      case \"available-teachers\":\n        const teacherGradeLevel = url.searchParams.get(\"teacherGradeLevel\");\n        const teachersResult = await query(\"SELECT * FROM get_available_teachers($1, $2)\", [teacherGradeLevel ? parseInt(teacherGradeLevel) : null, schoolYear]);\n        return json({ success: true, data: teachersResult.rows });\n      case \"available-students\":\n        if (!gradeLevel) {\n          return json({ success: false, error: \"Grade level is required\" }, { status: 400 });\n        }\n        const studentsResult = await query(\"SELECT * FROM get_available_students($1, $2)\", [parseInt(gradeLevel), schoolYear]);\n        return json({ success: true, data: studentsResult.rows });\n      case \"section-details\":\n        const sectionDetailsResult = await query(\"SELECT * FROM get_section_details($1, $2)\", [sectionId ? parseInt(sectionId) : null, schoolYear]);\n        return json({ success: true, data: sectionDetailsResult.rows });\n      case \"section-students\":\n        if (!sectionId) {\n          return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n        }\n        const sectionStudentsResult = await query(`\n                    SELECT \n                        u.id,\n                        u.account_number,\n                        u.first_name,\n                        u.last_name,\n                        u.full_name,\n                        u.email,\n                        u.grade_level,\n                        u.age,\n                        u.guardian,\n                        ss.enrolled_at,\n                        ss.status as enrollment_status\n                    FROM section_students ss\n                    JOIN users u ON ss.student_id = u.id\n                    WHERE ss.section_id = $1 AND ss.status = 'active'\n                    ORDER BY u.full_name\n                `, [parseInt(sectionId)]);\n        return json({ success: true, data: sectionStudentsResult.rows });\n      default:\n        const allSectionsResult = await query(\"SELECT * FROM get_section_details(NULL, $1)\", [schoolYear]);\n        return json({ success: true, data: allSectionsResult.rows });\n    }\n  } catch (error) {\n    console.error(\"Error fetching sections data:\", error);\n    return json({ success: false, error: \"Failed to fetch data\" }, { status: 500 });\n  }\n}\nasync function POST({ request, getClientAddress }) {\n  try {\n    const { sectionName, gradeLevel, schoolYear, adviserId, studentIds, roomId } = await request.json();\n    const clientIP = getClientAddress();\n    const userAgent = request.headers.get(\"user-agent\");\n    if (!sectionName || !gradeLevel || !schoolYear) {\n      return json({ success: false, error: \"Missing required fields\" }, { status: 400 });\n    }\n    await query(\"BEGIN\");\n    try {\n      const sectionResult = await query(`\n                INSERT INTO sections (name, grade_level, school_year, adviser_id, room_id)\n                VALUES ($1, $2, $3, $4, $5)\n                RETURNING id, name, grade_level, school_year, adviser_id, room_id, created_at\n            `, [sectionName, parseInt(gradeLevel), schoolYear, adviserId ? parseInt(adviserId) : null, roomId ? parseInt(roomId) : null]);\n      const newSection = sectionResult.rows[0];\n      if (studentIds && Array.isArray(studentIds) && studentIds.length > 0) {\n        for (const studentId of studentIds) {\n          await query(`\n                        INSERT INTO section_students (section_id, student_id)\n                        VALUES ($1, $2)\n                    `, [newSection.id, parseInt(studentId)]);\n        }\n      }\n      if (roomId) {\n        await query(`\n                    UPDATE rooms \n                    SET status = 'assigned', assigned_to = $1\n                    WHERE id = $2\n                `, [`${sectionName} (Grade ${gradeLevel})`, parseInt(roomId)]);\n      }\n      try {\n        const user = await getUserFromRequest(request);\n        await logActivityWithUser(\n          \"section_created\",\n          user,\n          {\n            section_id: newSection.id,\n            section_name: sectionName,\n            grade_level: parseInt(gradeLevel),\n            school_year: schoolYear,\n            adviser_id: parseInt(adviserId),\n            student_count: studentIds.length,\n            room_id: roomId ? parseInt(roomId) : null\n          },\n          clientIP,\n          userAgent\n        );\n        for (const studentId of studentIds) {\n          const studentResult = await query(\"SELECT id, full_name, account_number, grade_level FROM users WHERE id = $1\", [parseInt(studentId)]);\n          const student = studentResult.rows[0];\n          await logActivityWithUser(\n            \"student_enrolled_to_section\",\n            user,\n            {\n              section_id: newSection.id,\n              section_name: sectionName,\n              grade_level: parseInt(gradeLevel),\n              school_year: schoolYear,\n              student: {\n                id: student?.id,\n                name: student?.full_name,\n                account_number: student?.account_number,\n                grade_level: student?.grade_level\n              },\n              action: \"enrolled\"\n            },\n            clientIP,\n            userAgent\n          );\n        }\n      } catch (logError) {\n        console.error(\"Error logging section creation activity:\", logError);\n      }\n      await query(\"COMMIT\");\n      const sectionDetailsResult = await query(\"SELECT * FROM get_section_details($1, $2)\", [newSection.id, schoolYear]);\n      return json({\n        success: true,\n        data: sectionDetailsResult.rows[0],\n        message: `Section ${sectionName} created successfully with ${studentIds.length} students`\n      });\n    } catch (error) {\n      await query(\"ROLLBACK\");\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"Error creating section:\", error);\n    return json({ success: false, error: \"Failed to create section\" }, { status: 500 });\n  }\n}\nasync function PUT({ request, getClientAddress }) {\n  try {\n    const { sectionId, sectionName, adviserId, studentIds, roomId } = await request.json();\n    const clientIP = getClientAddress();\n    const userAgent = request.headers.get(\"user-agent\");\n    console.log(\"=== PUT REQUEST DEBUG ===\");\n    console.log(\"Received adviserId:\", adviserId);\n    console.log(\"typeof adviserId:\", typeof adviserId);\n    console.log(\"adviserId parsed as int:\", parseInt(adviserId));\n    console.log(\"Full request data:\", { sectionId, sectionName, adviserId, studentIds, roomId });\n    if (!sectionId) {\n      return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n    }\n    await query(\"BEGIN\");\n    try {\n      const currentSectionResult = await query(\"SELECT * FROM get_section_details($1, NULL)\", [parseInt(sectionId)]);\n      const currentSection = currentSectionResult.rows[0];\n      if (!currentSection) {\n        await query(\"ROLLBACK\");\n        return json({ success: false, error: \"Section not found\" }, { status: 404 });\n      }\n      if (sectionName || adviserId || roomId !== void 0) {\n        console.log(\"=== SECTION UPDATE DEBUG ===\");\n        console.log(\"Received adviserId:\", adviserId);\n        console.log(\"Type of adviserId:\", typeof adviserId);\n        console.log(\"Parsed adviserId:\", adviserId ? parseInt(adviserId) : null);\n        console.log(\"sectionName:\", sectionName);\n        console.log(\"roomId:\", roomId);\n        console.log(\"sectionId:\", sectionId);\n        let updateFields = [];\n        let updateValues = [];\n        let paramIndex = 1;\n        if (sectionName) {\n          updateFields.push(`name = $${paramIndex}`);\n          updateValues.push(sectionName);\n          paramIndex++;\n        }\n        if (adviserId !== void 0) {\n          console.log(\"Adding adviser_id to update fields\");\n          updateFields.push(`adviser_id = $${paramIndex}`);\n          updateValues.push(adviserId ? parseInt(adviserId) : null);\n          paramIndex++;\n        }\n        if (roomId !== void 0) {\n          updateFields.push(`room_id = $${paramIndex}`);\n          updateValues.push(roomId ? parseInt(roomId) : null);\n          paramIndex++;\n        }\n        if (updateFields.length > 0) {\n          updateValues.push(parseInt(sectionId));\n          const updateQuery = `\n                        UPDATE sections \n                        SET ${updateFields.join(\", \")}\n                        WHERE id = $${paramIndex}\n                        RETURNING id, name, adviser_id, room_id\n                    `;\n          console.log(\"Final update query:\", updateQuery);\n          console.log(\"Final update values:\", updateValues);\n          const updateResult = await query(updateQuery, updateValues);\n          console.log(\"Raw update result:\", updateResult.rows[0]);\n          const verifyResult = await query(\"SELECT id, name, adviser_id, room_id FROM sections WHERE id = $1\", [parseInt(sectionId)]);\n          console.log(\"Verification query result:\", verifyResult.rows[0]);\n        }\n      }\n      if (studentIds) {\n        const currentStudentsResult = await query(`\n                    SELECT student_id FROM section_students \n                    WHERE section_id = $1 AND status = 'active'\n                `, [parseInt(sectionId)]);\n        const currentStudentIds = currentStudentsResult.rows.map((row) => row.student_id);\n        const newStudentIds = studentIds.map((id) => parseInt(id));\n        const studentsToRemove = currentStudentIds.filter((id) => !newStudentIds.includes(id));\n        const studentsToAdd = newStudentIds.filter((id) => !currentStudentIds.includes(id));\n        for (const studentId of studentsToRemove) {\n          await query(`\n                        DELETE FROM section_students \n                        WHERE section_id = $1 AND student_id = $2\n                    `, [parseInt(sectionId), studentId]);\n          try {\n            const user = await getUserFromRequest(request);\n            const studentResult = await query(\"SELECT id, full_name, account_number, grade_level FROM users WHERE id = $1\", [studentId]);\n            const student = studentResult.rows[0];\n            await logActivityWithUser(\n              \"student_removed_from_section\",\n              user,\n              {\n                section_id: parseInt(sectionId),\n                section_name: currentSection.name,\n                grade_level: currentSection.grade_level,\n                school_year: currentSection.school_year,\n                student: {\n                  id: student?.id,\n                  name: student?.full_name,\n                  account_number: student?.account_number,\n                  grade_level: student?.grade_level\n                },\n                action: \"removed\"\n              },\n              clientIP,\n              userAgent\n            );\n          } catch (logError) {\n            console.error(\"Error logging student removal:\", logError);\n          }\n        }\n        for (const studentId of studentsToAdd) {\n          await query(`\n                        INSERT INTO section_students (section_id, student_id)\n                        VALUES ($1, $2)\n                        ON CONFLICT (section_id, student_id) \n                        DO UPDATE SET status = 'active', enrolled_at = CURRENT_TIMESTAMP\n                    `, [parseInt(sectionId), studentId]);\n          try {\n            const user = await getUserFromRequest(request);\n            const studentResult = await query(\"SELECT id, full_name, account_number, grade_level FROM users WHERE id = $1\", [studentId]);\n            const student = studentResult.rows[0];\n            await logActivityWithUser(\n              \"student_added_to_section\",\n              user,\n              {\n                section_id: parseInt(sectionId),\n                section_name: sectionName || currentSection.name,\n                grade_level: currentSection.grade_level,\n                school_year: currentSection.school_year,\n                student: {\n                  id: student?.id,\n                  name: student?.full_name,\n                  account_number: student?.account_number,\n                  grade_level: student?.grade_level\n                },\n                action: \"added\"\n              },\n              clientIP,\n              userAgent\n            );\n          } catch (logError) {\n            console.error(\"Error logging student addition:\", logError);\n          }\n        }\n      }\n      if (roomId !== void 0) {\n        if (currentSection.room_id) {\n          await query(`\n                        UPDATE rooms \n                        SET status = 'available', assigned_to = NULL\n                        WHERE id = $1\n                    `, [currentSection.room_id]);\n        }\n        if (roomId) {\n          await query(`\n                        UPDATE rooms \n                        SET status = 'assigned', assigned_to = $1\n                        WHERE id = $2\n                    `, [`${sectionName || currentSection.name} (Grade ${currentSection.grade_level})`, parseInt(roomId)]);\n        }\n      }\n      if (adviserId && parseInt(adviserId) !== currentSection.adviser_id) {\n        try {\n          const user = await getUserFromRequest(request);\n          const oldAdviserResult = currentSection.adviser_id ? await query(\"SELECT id, full_name, account_number FROM users WHERE id = $1\", [currentSection.adviser_id]) : { rows: [] };\n          const newAdviserResult = await query(\"SELECT id, full_name, account_number FROM users WHERE id = $1\", [parseInt(adviserId)]);\n          const oldAdviser = oldAdviserResult.rows[0] || null;\n          const newAdviser = newAdviserResult.rows[0] || null;\n          await logActivityWithUser(\n            \"section_adviser_changed\",\n            user,\n            {\n              section_id: parseInt(sectionId),\n              section_name: sectionName || currentSection.name,\n              grade_level: currentSection.grade_level,\n              school_year: currentSection.school_year,\n              old_adviser: oldAdviser ? {\n                id: oldAdviser.id,\n                name: oldAdviser.full_name,\n                account_number: oldAdviser.account_number\n              } : null,\n              new_adviser: newAdviser ? {\n                id: newAdviser.id,\n                name: newAdviser.full_name,\n                account_number: newAdviser.account_number\n              } : null\n            },\n            clientIP,\n            userAgent\n          );\n        } catch (logError) {\n          console.error(\"Error logging adviser change:\", logError);\n        }\n      }\n      const hasNameChange = sectionName && sectionName !== currentSection.name;\n      const hasRoomChange = roomId !== void 0 && parseInt(roomId || 0) !== (currentSection.room_id || 0);\n      const hasAdviserChange = adviserId && parseInt(adviserId) !== currentSection.adviser_id;\n      if (hasNameChange || hasRoomChange) {\n        try {\n          const user = await getUserFromRequest(request);\n          await logActivityWithUser(\n            \"section_updated\",\n            user,\n            {\n              section_id: parseInt(sectionId),\n              section_name: sectionName || currentSection.name,\n              grade_level: currentSection.grade_level,\n              school_year: currentSection.school_year,\n              changes: {\n                name_changed: hasNameChange,\n                room_changed: hasRoomChange\n              }\n            },\n            clientIP,\n            userAgent\n          );\n        } catch (logError) {\n          console.error(\"Error logging section update:\", logError);\n        }\n      }\n      await query(\"COMMIT\");\n      const updatedSectionResult = await query(\"SELECT * FROM get_section_details($1, NULL)\", [parseInt(sectionId)]);\n      return json({\n        success: true,\n        data: updatedSectionResult.rows[0],\n        message: \"Section updated successfully\"\n      });\n    } catch (error) {\n      await query(\"ROLLBACK\");\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"Error updating section:\", error);\n    return json({ success: false, error: \"Failed to update section\" }, { status: 500 });\n  }\n}\nasync function DELETE({ url, request, getClientAddress }) {\n  try {\n    const sectionId = url.searchParams.get(\"sectionId\");\n    const clientIP = getClientAddress();\n    const userAgent = request.headers.get(\"user-agent\");\n    if (!sectionId) {\n      return json({ success: false, error: \"Section ID is required\" }, { status: 400 });\n    }\n    await query(\"BEGIN\");\n    try {\n      const sectionResult = await query(\"SELECT * FROM get_section_details($1, NULL)\", [parseInt(sectionId)]);\n      const section = sectionResult.rows[0];\n      if (!section) {\n        await query(\"ROLLBACK\");\n        return json({ success: false, error: \"Section not found\" }, { status: 404 });\n      }\n      const studentsResult = await query(`\n                SELECT student_id FROM section_students \n                WHERE section_id = $1 AND status = 'active'\n            `, [parseInt(sectionId)]);\n      if (section.room_id) {\n        await query(`\n                    UPDATE rooms \n                    SET status = 'available', assigned_to = NULL\n                    WHERE id = $1\n                `, [section.room_id]);\n      }\n      await query(`\n                DELETE FROM section_students \n                WHERE section_id = $1\n            `, [parseInt(sectionId)]);\n      await query(`\n                DELETE FROM sections \n                WHERE id = $1\n            `, [parseInt(sectionId)]);\n      try {\n        const user = await getUserFromRequest(request);\n        await logActivityWithUser(\n          \"section_deleted\",\n          user,\n          {\n            section_id: parseInt(sectionId),\n            section_name: section.name,\n            grade_level: section.grade_level,\n            school_year: section.school_year,\n            student_count: section.student_count,\n            room_freed: section.room_id ? true : false\n          },\n          clientIP,\n          userAgent\n        );\n      } catch (logError) {\n        console.error(\"Error logging section deletion activity:\", logError);\n      }\n      await query(\"COMMIT\");\n      return json({\n        success: true,\n        message: `Section ${section.name} has been deleted successfully`\n      });\n    } catch (error) {\n      await query(\"ROLLBACK\");\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"Error deleting section:\", error);\n    return json({ success: false, error: \"Failed to delete section\" }, { status: 500 });\n  }\n}\nexport {\n  DELETE,\n  GET,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}