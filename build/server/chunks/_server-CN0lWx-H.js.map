{"version":3,"file":"_server-CN0lWx-H.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/student-profile/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport \"../../../../chunks/db.js\";\nimport \"mongodb\";\nasync function GET({ url }) {\n  try {\n    const studentId = url.searchParams.get(\"studentId\");\n    if (!studentId) {\n      return json({ error: \"Student ID is required\" }, { status: 400 });\n    }\n    const sectionQuery = `\n      SELECT \n        ss.student_id,\n        s.id as section_id,\n        s.name as section_name,\n        s.grade_level,\n        u.full_name as adviser_name\n      FROM section_students ss\n      JOIN sections s ON ss.section_id = s.id\n      LEFT JOIN users u ON s.adviser_id = u.id\n      WHERE ss.student_id = $1 AND ss.status = 'active'\n      LIMIT 1\n    `;\n    const sectionResult = await query(sectionQuery, [studentId]);\n    const sectionInfo = sectionResult.rows[0] || null;\n    let subjects = [];\n    if (sectionInfo) {\n      const subjectsQuery = `\n        SELECT DISTINCT\n          s.id,\n          s.name,\n          s.code,\n          s.grade_level,\n          d.name as department_name,\n          u.full_name as teacher_name\n        FROM subjects s\n        LEFT JOIN departments d ON s.department_id = d.id\n        LEFT JOIN schedules sch ON s.id = sch.subject_id AND sch.section_id = $2\n        LEFT JOIN users u ON sch.teacher_id = u.id AND u.account_type = 'teacher'\n        WHERE s.grade_level = $1\n        ORDER BY s.name\n      `;\n      const subjectsResult = await query(subjectsQuery, [sectionInfo.grade_level, sectionInfo.section_id]);\n      subjects = subjectsResult.rows.map((subject) => ({\n        id: subject.id,\n        name: subject.name,\n        code: subject.code,\n        department: subject.department_name || \"General\",\n        teacher: subject.teacher_name || \"No teacher\",\n        color: getSubjectColor(subject.name)\n        // Helper function for UI colors\n      }));\n    }\n    let generalAverage = null;\n    let totalSubjectsWithGrades = 0;\n    if (sectionInfo) {\n      const gradesQuery = `\n        SELECT \n          AVG(fg.final_grade) as average_grade,\n          COUNT(fg.final_grade) as subjects_with_grades\n        FROM final_grades fg\n        JOIN subjects s ON fg.subject_id = s.id\n        WHERE fg.student_id = $1 \n        AND s.grade_level = $2\n        AND fg.final_grade IS NOT NULL\n        AND fg.verified = true\n      `;\n      const gradesResult = await query(gradesQuery, [studentId, sectionInfo.grade_level]);\n      if (gradesResult.rows[0] && gradesResult.rows[0].average_grade) {\n        generalAverage = Math.round(parseFloat(gradesResult.rows[0].average_grade) * 100) / 100;\n        totalSubjectsWithGrades = parseInt(gradesResult.rows[0].subjects_with_grades);\n      }\n    }\n    let classRank = null;\n    let totalStudentsInSection = 0;\n    if (sectionInfo && generalAverage !== null) {\n      const rankQuery = `\n        WITH student_averages AS (\n          SELECT \n            ss.student_id,\n            AVG(fg.final_grade) as average_grade\n          FROM section_students ss\n          JOIN final_grades fg ON ss.student_id = fg.student_id\n          JOIN subjects s ON fg.subject_id = s.id\n          WHERE ss.section_id = $1 \n          AND ss.status = 'active'\n          AND s.grade_level = $2\n          AND fg.final_grade IS NOT NULL\n          AND fg.verified = true\n          GROUP BY ss.student_id\n          HAVING COUNT(fg.final_grade) > 0\n        ),\n        ranked_students AS (\n          SELECT \n            student_id,\n            average_grade,\n            RANK() OVER (ORDER BY average_grade DESC) as rank\n          FROM student_averages\n        )\n        SELECT \n          rank,\n          (SELECT COUNT(*) FROM student_averages) as total_students\n        FROM ranked_students \n        WHERE student_id = $3\n      `;\n      const rankResult = await query(rankQuery, [sectionInfo.section_id, sectionInfo.grade_level, studentId]);\n      if (rankResult.rows[0]) {\n        classRank = parseInt(rankResult.rows[0].rank);\n        totalStudentsInSection = parseInt(rankResult.rows[0].total_students);\n      }\n    }\n    if (sectionInfo && totalStudentsInSection === 0) {\n      const totalStudentsQuery = `\n        SELECT COUNT(*) as total\n        FROM section_students ss\n        WHERE ss.section_id = $1 AND ss.status = 'active'\n      `;\n      const totalResult = await query(totalStudentsQuery, [sectionInfo.section_id]);\n      totalStudentsInSection = parseInt(totalResult.rows[0]?.total || 0);\n    }\n    const profileData = {\n      section: sectionInfo ? {\n        id: sectionInfo.section_id,\n        name: sectionInfo.section_name,\n        gradeLevel: sectionInfo.grade_level,\n        adviser: sectionInfo.adviser_name || \"Not assigned\"\n      } : null,\n      subjects,\n      academicSummary: {\n        generalAverage,\n        classRank,\n        totalStudentsInSection,\n        totalSubjectsEnrolled: subjects.length,\n        totalSubjectsWithGrades\n      }\n    };\n    return json({\n      success: true,\n      data: profileData\n    });\n  } catch (error) {\n    console.error(\"Error fetching student profile data:\", error);\n    if (error.code === \"ECONNREFUSED\" || error.code === \"ENOTFOUND\") {\n      return json({ error: \"Database connection failed\" }, { status: 503 });\n    }\n    return json({ error: \"Failed to fetch student profile data\" }, { status: 500 });\n  }\n}\nfunction getSubjectColor(subjectName) {\n  const colors = {\n    \"Math\": \"#4F46E5\",\n    \"Science\": \"#059669\",\n    \"English\": \"#DC2626\",\n    \"Physical Education\": \"#EA580C\",\n    \"Filipino\": \"#7C2D12\",\n    \"History\": \"#B45309\",\n    \"Computer\": \"#6366F1\",\n    \"Arts\": \"#C026D3\"\n  };\n  for (const [key, color] of Object.entries(colors)) {\n    if (subjectName.toLowerCase().includes(key.toLowerCase())) {\n      return color;\n    }\n  }\n  return \"#6B7280\";\n}\nexport {\n  GET\n};\n"],"names":[],"mappings":"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"}