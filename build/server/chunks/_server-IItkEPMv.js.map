{"version":3,"file":"_server-IItkEPMv.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/grades/save/_server.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { q as query } from \"../../../../../chunks/db.js\";\nimport { v as verifyAuth } from \"../../../../../chunks/auth-helper.js\";\nasync function POST({ request }) {\n  console.log(\"=== GRADES SAVE API CALLED ===\");\n  try {\n    const authResult = await verifyAuth(request, [\"teacher\"]);\n    if (!authResult.success) {\n      console.log(\"Authentication failed:\", authResult.error);\n      return json({ error: authResult.error }, { status: authResult.status || 401 });\n    }\n    console.log(\"User authenticated:\", authResult.user.account_number);\n    const body2 = await request.json();\n    console.log(\"Request body received:\", JSON.stringify(body2, null, 2));\n    const { section_id, subject_id, grading_period_id, grading_config, grades } = body2;\n    if (!section_id || !subject_id || !grading_period_id || !grades || !Array.isArray(grades)) {\n      return json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n    const teacherId = authResult.user.id;\n    await query(\"BEGIN\");\n    try {\n      const categories = await getOrCreateCategories();\n      const results = {\n        writtenWork: [],\n        performanceTasks: [],\n        quarterlyAssessment: []\n      };\n      if (grading_config.writtenWork) {\n        results.writtenWork = await processAssessmentGrades(\n          grades,\n          \"writtenWork\",\n          await getExistingGradeItems(section_id, subject_id, grading_period_id, categories.writtenWork, teacherId, grading_config.writtenWork, \"writtenWork\"),\n          teacherId\n        );\n      }\n      if (grading_config.performanceTasks) {\n        results.performanceTasks = await processAssessmentGrades(\n          grades,\n          \"performanceTasks\",\n          await getExistingGradeItems(section_id, subject_id, grading_period_id, categories.performanceTasks, teacherId, grading_config.performanceTasks, \"performanceTasks\"),\n          teacherId\n        );\n      }\n      if (grading_config.quarterlyAssessment) {\n        results.quarterlyAssessment = await processAssessmentGrades(\n          grades,\n          \"quarterlyAssessment\",\n          await getExistingGradeItems(section_id, subject_id, grading_period_id, categories.quarterlyAssessment, teacherId, grading_config.quarterlyAssessment, \"quarterlyAssessment\"),\n          teacherId\n        );\n      }\n      await query(\"COMMIT\");\n      return json({\n        success: true,\n        message: \"Grades saved successfully\",\n        results\n      });\n    } catch (error) {\n      await query(\"ROLLBACK\");\n      console.error(\"Transaction error:\", error);\n      console.error(\"Transaction error details:\", {\n        message: error.message,\n        stack: error.stack,\n        sectionId: section_id,\n        subjectId: subject_id,\n        gradingPeriodId: grading_period_id,\n        gradesCount: grades?.length\n      });\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"Error saving grades:\", error);\n    console.error(\"Error details:\", {\n      message: error.message,\n      stack: error.stack,\n      body\n    });\n    return json({ error: \"Internal server error\", details: error.message }, { status: 500 });\n  }\n}\nasync function getOrCreateCategories() {\n  const categoryQuery = `\n    SELECT id, name, code FROM grade_categories \n    WHERE code IN ('WW', 'PT', 'QA')\n  `;\n  const existingCategories = await query(categoryQuery);\n  const categoryMap = {};\n  existingCategories.rows.forEach((cat) => {\n    if (cat.code === \"WW\") categoryMap.writtenWork = cat.id;\n    if (cat.code === \"PT\") categoryMap.performanceTasks = cat.id;\n    if (cat.code === \"QA\") categoryMap.quarterlyAssessment = cat.id;\n  });\n  if (!categoryMap.writtenWork) {\n    const result = await query(\n      `INSERT INTO grade_categories (name, code, weight) VALUES ('Written Work', 'WW', 0.30) RETURNING id`\n    );\n    categoryMap.writtenWork = result.rows[0].id;\n  }\n  if (!categoryMap.performanceTasks) {\n    const result = await query(\n      `INSERT INTO grade_categories (name, code, weight) VALUES ('Performance Tasks', 'PT', 0.50) RETURNING id`\n    );\n    categoryMap.performanceTasks = result.rows[0].id;\n  }\n  if (!categoryMap.quarterlyAssessment) {\n    const result = await query(\n      `INSERT INTO grade_categories (name, code, weight) VALUES ('Quarterly Assessment', 'QA', 0.20) RETURNING id`\n    );\n    categoryMap.quarterlyAssessment = result.rows[0].id;\n  }\n  return categoryMap;\n}\nasync function processAssessmentGrades(grades, assessmentType, gradeItems, teacherId) {\n  const results = [];\n  for (const studentGrade of grades) {\n    const studentAccountNumber = studentGrade.student_id;\n    const assessmentGrades = studentGrade[assessmentType];\n    console.log(`Processing student: ${studentAccountNumber}, assessment: ${assessmentType}`);\n    let studentId;\n    try {\n      const studentQuery = \"SELECT id FROM users WHERE account_number = $1 AND account_type = $2\";\n      const studentResult = await query(studentQuery, [studentAccountNumber, \"student\"]);\n      if (studentResult.rows.length === 0) {\n        console.log(`Student not found: ${studentAccountNumber}`);\n        continue;\n      }\n      studentId = studentResult.rows[0].id;\n      console.log(`Found student ID: ${studentId} for account: ${studentAccountNumber}`);\n    } catch (error) {\n      console.error(`Error finding student ${studentAccountNumber}:`, error);\n      continue;\n    }\n    if (assessmentGrades && Array.isArray(assessmentGrades)) {\n      for (let i = 0; i < assessmentGrades.length; i++) {\n        const score = assessmentGrades[i];\n        const gradeItem = gradeItems[i];\n        if (gradeItem && score !== null && score !== void 0 && score !== \"\") {\n          const upsertQuery = `\n            INSERT INTO student_grades (student_id, grade_item_id, score, graded_by, graded_at)\n            VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n            ON CONFLICT (student_id, grade_item_id)\n            DO UPDATE SET \n              score = EXCLUDED.score,\n              graded_by = EXCLUDED.graded_by,\n              graded_at = EXCLUDED.graded_at,\n              updated_at = CURRENT_TIMESTAMP\n            RETURNING *\n          `;\n          const result = await query(upsertQuery, [studentId, gradeItem.id, parseFloat(score), teacherId]);\n          results.push(result.rows[0]);\n        }\n      }\n    }\n  }\n  return results;\n}\nasync function getExistingGradeItems(sectionId, subjectId, gradingPeriodId, categoryId, teacherId, config, assessmentType) {\n  console.log(`Getting existing grade items for ${assessmentType}:`, { sectionId, subjectId, gradingPeriodId, categoryId, config });\n  try {\n    const existingQuery = `\n      SELECT * FROM grade_items \n      WHERE section_id = $1 AND subject_id = $2 AND grading_period_id = $3 \n      AND category_id = $4\n      ORDER BY created_at ASC\n    `;\n    const existing = await query(existingQuery, [sectionId, subjectId, gradingPeriodId, categoryId]);\n    console.log(`Found ${existing.rows.length} existing grade items for ${assessmentType}`);\n    return existing.rows;\n  } catch (error) {\n    console.error(`Error getting existing grade items for ${assessmentType}:`, error);\n    throw error;\n  }\n}\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}