{"version":3,"file":"notification-helper-3WedpjE4.js","sources":["../../../.svelte-kit/adapter-node/chunks/notification-helper.js"],"sourcesContent":["import { ObjectId } from \"mongodb\";\nfunction formatTeacherName(fullName, gender = \"unknown\") {\n  if (!fullName) return \"Your teacher\";\n  let lastName;\n  if (fullName.includes(\",\")) {\n    lastName = fullName.split(\",\")[0].trim();\n  } else {\n    const nameParts = fullName.trim().split(\" \");\n    lastName = nameParts[nameParts.length - 1];\n  }\n  let title = \"Teacher\";\n  if (gender === \"female\") {\n    title = \"Ms.\";\n  } else if (gender === \"male\") {\n    title = \"Mr.\";\n  } else {\n    title = \"Teacher\";\n  }\n  return `${title} ${lastName}`;\n}\nasync function createGradeVerificationNotification(db, studentId, teacherName, subjectName) {\n  try {\n    const notificationTitle = `Your grade in ${subjectName} is now available`;\n    const notificationMessage = `Your grade in ${subjectName} has been released by ${teacherName}. Check your grade report to see your performance.`;\n    const notification = {\n      student_id: studentId,\n      title: notificationTitle,\n      message: notificationMessage,\n      type: \"grade\",\n      is_read: false,\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date(),\n      created_by: null\n      // System-generated notification\n    };\n    await db.collection(\"notifications\").insertOne(notification);\n    console.log(`Grade verification notification created for student: ${studentId}`);\n  } catch (error) {\n    console.error(\"Error creating grade verification notification:\", error);\n  }\n}\nasync function createBulkGradeVerificationNotifications(db, studentIds, teacherName, subjectName) {\n  try {\n    const notificationTitle = `Your grade in ${subjectName} is now available`;\n    const notificationMessage = `Your grade in ${subjectName} has been released by ${teacherName}. Check your grade report to see your performance.`;\n    const notifications = studentIds.map((studentId) => ({\n      student_id: studentId,\n      title: notificationTitle,\n      message: notificationMessage,\n      type: \"grade\",\n      is_read: false,\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date(),\n      created_by: null\n      // System-generated notification\n    }));\n    if (notifications.length > 0) {\n      await db.collection(\"notifications\").insertMany(notifications);\n      console.log(`Grade verification notifications created for ${notifications.length} students`);\n    }\n  } catch (error) {\n    console.error(\"Error creating bulk grade verification notifications:\", error);\n  }\n}\nasync function createDocumentRequestNotification(db, studentId, documentType, status, adminNote = null, rejectionReason = null, adminUser = null) {\n  try {\n    let notificationTitle = \"\";\n    let notificationMessage = \"\";\n    let adminName = null;\n    if (adminUser && adminUser.id) {\n      try {\n        const usersCollection = db.collection(\"users\");\n        const adminRecord = await usersCollection.findOne(\n          { _id: new ObjectId(adminUser.id) },\n          { projection: { first_name: 1, last_name: 1, name: 1, username: 1 } }\n        );\n        if (adminRecord) {\n          if (adminRecord.first_name && adminRecord.last_name) {\n            adminName = `${adminRecord.first_name} ${adminRecord.last_name}`;\n          } else if (adminRecord.name) {\n            adminName = adminRecord.name;\n          } else if (adminRecord.username) {\n            adminName = adminRecord.username;\n          } else {\n            adminName = \"Admin\";\n          }\n          console.log(`Found admin name: ${adminName} for user ID: ${adminUser.id}`);\n        } else {\n          console.log(`No admin record found for user ID: ${adminUser.id}`);\n        }\n      } catch (dbError) {\n        console.error(\"Error fetching admin user data:\", dbError);\n        if (adminUser.first_name && adminUser.last_name) {\n          adminName = `${adminUser.first_name} ${adminUser.last_name}`;\n        } else if (adminUser.name) {\n          adminName = adminUser.name;\n        } else if (adminUser.username) {\n          adminName = adminUser.username;\n        } else {\n          adminName = \"Admin\";\n        }\n      }\n    }\n    const documentTypeMap = {\n      \"transcript\": \"Transcript\",\n      \"enrollment\": \"Enrollment Certificate\",\n      \"grade-report\": \"Grade Report\",\n      \"diploma\": \"Diploma\",\n      \"certificate\": \"Certificate\"\n    };\n    const formattedDocType = documentTypeMap[documentType] || documentType;\n    switch (status) {\n      case \"processing\":\n        notificationTitle = `Document request approved - Now processing`;\n        notificationMessage = `Your ${formattedDocType} request has been approved and is now being processed.`;\n        break;\n      case \"rejected\":\n        notificationTitle = `Document request rejected`;\n        notificationMessage = `Your ${formattedDocType} request has been rejected.`;\n        break;\n      case \"completed\":\n        notificationTitle = `Document request completed`;\n        notificationMessage = `Your ${formattedDocType} request has been completed.`;\n        break;\n      default:\n        console.warn(`Unknown document request status: ${status}`);\n        return;\n    }\n    const notification = {\n      student_id: studentId,\n      title: notificationTitle,\n      message: notificationMessage,\n      type: \"document_request\",\n      is_read: false,\n      created_at: /* @__PURE__ */ new Date(),\n      updated_at: /* @__PURE__ */ new Date(),\n      created_by: adminUser ? adminUser.id : null,\n      // Store admin note and rejection reason as separate fields\n      admin_note: adminNote || null,\n      rejection_reason: rejectionReason || null,\n      document_type: documentType,\n      status,\n      // Store admin information\n      admin_name: adminName,\n      admin_id: adminUser ? adminUser.id : null\n    };\n    await db.collection(\"notifications\").insertOne(notification);\n    console.log(`Document request notification created for student: ${studentId}, status: ${status}`);\n  } catch (error) {\n    console.error(\"Error creating document request notification:\", error);\n  }\n}\nexport {\n  createGradeVerificationNotification as a,\n  createBulkGradeVerificationNotifications as b,\n  createDocumentRequestNotification as c,\n  formatTeacherName as f\n};\n"],"names":[],"mappings":"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"}